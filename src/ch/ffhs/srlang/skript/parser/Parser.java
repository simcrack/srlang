
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 23 23:19:33 CEST 2021
//----------------------------------------------------

package ch.ffhs.srlang.skript.parser;

import java.util.ArrayList;
import java_cup.runtime.*;
import ch.ffhs.srlang.skript.instr.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 23 23:19:33 CEST 2021
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\022\003\000\002\006" +
    "\002\000\002\006\004\000\002\007\003\000\002\007\003" +
    "\000\002\007\004\000\002\007\005\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\020\005\000\002" +
    "\002\003\000\002\010\006\000\002\003\003\000\002\003" +
    "\005\000\002\003\003\000\002\003\003\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\015\005\000\002\016\003\000\002\016\005\000\002" +
    "\017\003\000\002\017\005\000\002\011\003\000\002\013" +
    "\006\000\002\012\012\000\002\012\017\000\002\014\011" +
    "\000\002\021\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\020\002\uffff\011\uffff\022\uffff\023\uffff\024" +
    "\uffff\026\uffff\030\uffff\001\002\000\004\002\122\001\002" +
    "\000\020\002\000\011\006\022\020\023\010\024\012\026" +
    "\024\030\017\001\002\000\020\010\uffff\011\uffff\022\uffff" +
    "\023\uffff\024\uffff\026\uffff\030\uffff\001\002\000\024\002" +
    "\ufff7\010\ufff7\011\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\030\ufff7\001\002\000\004\016\112\001\002\000" +
    "\024\002\ufffd\010\ufffd\011\ufffd\022\ufffd\023\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\030\ufffd\001\002\000\004\016\101\001" +
    "\002\000\024\002\ufff8\010\ufff8\011\ufff8\022\ufff8\023\ufff8" +
    "\024\ufff8\025\ufff8\026\ufff8\030\ufff8\001\002\000\004\006" +
    "\076\001\002\000\004\020\075\001\002\000\004\016\067" +
    "\001\002\000\026\005\ufff5\006\ufff5\007\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\016\uffe6\017\ufff5\020\ufff5\001\002" +
    "\000\004\030\045\001\002\000\024\002\ufffe\010\ufffe\011" +
    "\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\030\ufffe" +
    "\001\002\000\024\002\ufff9\010\ufff9\011\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\030\ufff9\001\002\000\024" +
    "\002\ufffc\010\ufffc\011\ufffc\022\ufffc\023\ufffc\024\ufffc\025" +
    "\ufffc\026\ufffc\030\ufffc\001\002\000\010\004\027\016\025" +
    "\030\017\001\002\000\010\004\027\016\025\030\017\001" +
    "\002\000\014\005\034\012\035\014\033\017\032\020\036" +
    "\001\002\000\022\005\ufff1\007\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\017\ufff1\020\ufff1\001\002\000\022\005\ufff3" +
    "\007\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\017\ufff3\020" +
    "\ufff3\001\002\000\022\005\ufff0\007\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\017\ufff0\020\ufff0\001\002\000\010\004" +
    "\027\016\025\030\017\001\002\000\010\004\027\016\025" +
    "\030\017\001\002\000\010\004\027\016\025\030\017\001" +
    "\002\000\010\004\027\016\025\030\017\001\002\000\024" +
    "\002\ufff6\010\ufff6\011\ufff6\022\ufff6\023\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\030\ufff6\001\002\000\022\005\uffec\007\uffec" +
    "\012\uffec\013\uffec\014\uffec\015\uffec\017\uffec\020\uffec\001" +
    "\002\000\022\005\uffef\007\uffef\012\035\013\uffef\014\033" +
    "\015\uffef\017\uffef\020\uffef\001\002\000\022\005\uffed\007" +
    "\uffed\012\uffed\013\uffed\014\uffed\015\uffed\017\uffed\020\uffed" +
    "\001\002\000\022\005\uffee\007\uffee\012\035\013\uffee\014" +
    "\033\015\uffee\017\uffee\020\uffee\001\002\000\014\005\034" +
    "\012\035\014\033\015\044\017\032\001\002\000\022\005" +
    "\ufff2\007\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\017\ufff2" +
    "\020\ufff2\001\002\000\004\016\uffe6\001\002\000\004\016" +
    "\047\001\002\000\004\030\051\001\002\000\006\013\053" +
    "\015\054\001\002\000\006\013\ufff5\015\ufff5\001\002\000" +
    "\006\013\uffea\015\uffea\001\002\000\004\030\051\001\002" +
    "\000\004\011\055\001\002\000\022\010\uffff\011\uffff\022" +
    "\uffff\023\uffff\024\uffff\025\uffff\026\uffff\030\uffff\001\002" +
    "\000\022\010\060\011\006\022\020\023\010\024\012\025" +
    "\057\026\024\030\017\001\002\000\004\016\061\001\002" +
    "\000\024\002\uffe4\010\uffe4\011\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\030\uffe4\001\002\000\010\004\027" +
    "\016\025\030\017\001\002\000\014\005\034\012\035\014" +
    "\033\015\063\017\032\001\002\000\004\020\064\001\002" +
    "\000\004\010\065\001\002\000\024\002\uffe3\010\uffe3\011" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\030\uffe3" +
    "\001\002\000\006\013\uffe9\015\uffe9\001\002\000\010\004" +
    "\027\016\025\030\017\001\002\000\006\013\072\015\073" +
    "\001\002\000\016\005\034\012\035\013\uffe8\014\033\015" +
    "\uffe8\017\032\001\002\000\010\004\027\016\025\030\017" +
    "\001\002\000\022\005\uffe5\007\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\017\uffe5\020\uffe5\001\002\000\016\005\034" +
    "\012\035\013\uffe7\014\033\015\uffe7\017\032\001\002\000" +
    "\024\002\ufffb\010\ufffb\011\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\030\ufffb\001\002\000\010\004\027\016" +
    "\025\030\017\001\002\000\014\005\034\012\035\014\033" +
    "\017\032\020\100\001\002\000\024\002\ufff4\010\ufff4\011" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\030\ufff4" +
    "\001\002\000\010\004\027\016\025\030\017\001\002\000" +
    "\014\005\034\007\110\012\035\014\033\017\032\001\002" +
    "\000\004\015\104\001\002\000\004\011\105\001\002\000" +
    "\020\010\uffff\011\uffff\022\uffff\023\uffff\024\uffff\026\uffff" +
    "\030\uffff\001\002\000\020\010\107\011\006\022\020\023" +
    "\010\024\012\026\024\030\017\001\002\000\024\002\uffe1" +
    "\010\uffe1\011\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\030\uffe1\001\002\000\010\004\027\016\025\030\017" +
    "\001\002\000\014\005\034\012\035\014\033\015\uffeb\017" +
    "\032\001\002\000\010\004\027\016\025\030\017\001\002" +
    "\000\004\015\114\001\002\000\004\011\115\001\002\000" +
    "\020\010\uffff\011\uffff\022\uffff\023\uffff\024\uffff\026\uffff" +
    "\030\uffff\001\002\000\020\010\117\011\006\022\020\023" +
    "\010\024\012\026\024\030\017\001\002\000\024\002\uffe2" +
    "\010\uffe2\011\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\030\uffe2\001\002\000\020\010\121\011\006\022\020" +
    "\023\010\024\012\026\024\030\017\001\002\000\024\002" +
    "\ufffa\010\ufffa\011\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\030\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\006\006\004\022\003\001\001\000\002\001" +
    "\001\000\024\002\013\007\020\010\010\011\015\012\022" +
    "\013\014\014\021\020\006\021\012\001\001\000\004\006" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\030\003\025\011\015" +
    "\013\027\001\001\000\012\002\030\003\042\011\015\013" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\030\003\041\011" +
    "\015\013\027\001\001\000\012\002\030\003\040\011\015" +
    "\013\027\001\001\000\012\002\030\003\037\011\015\013" +
    "\027\001\001\000\012\002\030\003\036\011\015\013\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\051\016\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\065\001\001\000" +
    "\002\001\001\000\004\006\055\001\001\000\024\002\013" +
    "\007\020\010\010\011\015\012\022\013\014\014\021\020" +
    "\006\021\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\030\003\061\011\015\013\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\030\003\070\011" +
    "\015\013\027\017\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\030\003\073\011\015\013\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\030\003\076\011\015\013\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\030\003\101" +
    "\011\015\013\027\015\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\105\001\001" +
    "\000\024\002\013\007\020\010\010\011\015\012\022\013" +
    "\014\014\021\020\006\021\012\001\001\000\002\001\001" +
    "\000\012\002\030\003\110\011\015\013\027\001\001\000" +
    "\002\001\001\000\014\002\030\003\101\011\015\013\027" +
    "\015\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\115\001\001\000\024\002\013\007\020\010\010" +
    "\011\015\012\022\013\014\014\021\020\006\021\012\001" +
    "\001\000\002\001\001\000\024\002\013\007\020\010\010" +
    "\011\015\012\022\013\014\014\021\020\006\021\012\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LOOP ::= kwLoop kwRoundOpen BOOL_EXPRESSION kwRoundClose kwCurlyOpen INSTRUCTIONS kwCurlyClose 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDITIONAL ::= kwIf kwRoundOpen BOOL_EXPRESSION kwRoundClose kwCurlyOpen INSTRUCTIONS kwCurlyClose 
            {
              InstrConditional RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instr be = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrInstructions is = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrConditional(be, is); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCTIONDEF ::= kwFunction FUNCTIONNAME kwRoundOpen ARGUMENTDEF kwRoundClose kwCurlyOpen INSTRUCTIONS kwReturn kwRoundOpen ARIT_EXPRESSION kwRoundClose kwEnd kwCurlyClose 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIONDEF",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCTIONDEF ::= kwFunction FUNCTIONNAME kwRoundOpen ARGUMENTDEF kwRoundClose kwCurlyOpen INSTRUCTIONS kwCurlyClose 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIONDEF",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCTIONCALL ::= FUNCTIONNAME kwRoundOpen ARGUMENTLIST kwRoundClose 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIONCALL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCTIONNAME ::= identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIONNAME",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARGUMENTLIST ::= ARGUMENTLIST kwList ARIT_EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTLIST",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARGUMENTLIST ::= ARIT_EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTLIST",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARGUMENTDEF ::= ARGUMENTDEF kwList VARIABLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTDEF",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARGUMENTDEF ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTDEF",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BOOL_EXPRESSION ::= ARIT_EXPRESSION kwCompare ARIT_EXPRESSION 
            {
              Instr RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ael = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr aer = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrBinaryOperation(BinaryOperator.EQU, ael, aer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL_EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARIT_EXPRESSION ::= ARIT_EXPRESSION kwDiv ARIT_EXPRESSION 
            {
              Instr RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ael = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr aer = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrBinaryOperation(BinaryOperator.DIV, ael, aer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARIT_EXPRESSION ::= ARIT_EXPRESSION kwMul ARIT_EXPRESSION 
            {
              Instr RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ael = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr aer = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrBinaryOperation(BinaryOperator.MUL, ael, aer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARIT_EXPRESSION ::= ARIT_EXPRESSION kwSub ARIT_EXPRESSION 
            {
              Instr RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ael = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr aer = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrBinaryOperation(BinaryOperator.SUB, ael, aer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARIT_EXPRESSION ::= ARIT_EXPRESSION kwAdd ARIT_EXPRESSION 
            {
              Instr RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ael = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr aer = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrBinaryOperation(BinaryOperator.ADD, ael, aer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARIT_EXPRESSION ::= VARIABLE 
            {
              Instr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrGetVariable(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARIT_EXPRESSION ::= literalInteger 
            {
              Instr RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = InstrConstant.integer(li); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARIT_EXPRESSION ::= kwRoundOpen ARIT_EXPRESSION kwRoundClose 
            {
              Instr RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instr ae = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ae; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARIT_EXPRESSION ::= FUNCTIONCALL 
            {
              Instr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VAR_ASSIGN ::= VARIABLE kwAssign ARIT_EXPRESSION kwEnd 
            {
              InstrSetVariable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instr ae = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrSetVariable(v, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_ASSIGN",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLE ::= identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ECHO ::= kwEcho ARIT_EXPRESSION kwEnd 
            {
              InstrEcho RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instr ae = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrEcho(ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ECHO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= ECHO 
            {
              Instr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrEcho e = (InstrEcho)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= LOOP 
            {
              Instr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= CONDITIONAL 
            {
              Instr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrConditional c = (InstrConditional)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= kwCurlyOpen INSTRUCTIONS kwCurlyClose 
            {
              Instr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= FUNCTIONCALL kwEnd 
            {
              Instr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= FUNCTIONDEF 
            {
              Instr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTION ::= VAR_ASSIGN 
            {
              Instr RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrSetVariable va = (InstrSetVariable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = va; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              InstrInstructions RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrInstructions is = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr i = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = is;
                        RESULT.addInstruction(i);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCTIONS ::= 
            {
              InstrInstructions RESULT =null;
		  RESULT = new InstrInstructions(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SCRIPT ::= INSTRUCTIONS 
            {
              InstrScript RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrInstructions is = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrScript(is); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SCRIPT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrScript start_val = (InstrScript)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

