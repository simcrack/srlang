
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 24 12:30:46 CEST 2021
//----------------------------------------------------

package ch.ffhs.srlang.skript.parser;

import ch.ffhs.srlang.skript.instr.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 24 12:30:46 CEST 2021
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\020\003\000\002\004" +
    "\002\000\002\004\004\000\002\005\003\000\002\005\003" +
    "\000\002\005\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\016\005\000\002\002\003\000\002" +
    "\006\006\000\002\003\003\000\002\003\005\000\002\003" +
    "\003\000\002\003\003\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\015\005\000" +
    "\002\015\005\000\002\012\003\000\002\012\005\000\002" +
    "\013\003\000\002\013\005\000\002\007\003\000\002\011" +
    "\011\000\002\011\012\000\002\011\016\000\002\011\017" +
    "\000\002\010\006\000\002\010\005\000\002\014\011\000" +
    "\002\014\015\000\002\017\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\016\002\uffff\023\uffff\024\uffff\025\uffff\027" +
    "\uffff\030\uffff\001\002\000\004\002\140\001\002\000\016" +
    "\002\000\023\017\024\010\025\012\027\023\030\016\001" +
    "\002\000\022\002\ufff8\011\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\001\002\000\004\017\131\001" +
    "\002\000\004\017\117\001\002\000\022\002\ufffd\011\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\001" +
    "\002\000\004\017\104\001\002\000\022\002\ufff9\011\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\001" +
    "\002\000\004\006\101\001\002\000\022\002\ufffc\011\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\001" +
    "\002\000\030\005\ufff6\006\ufff6\007\ufff6\010\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\017\uffe6\020\ufff6\021\ufff6\001" +
    "\002\000\004\030\045\001\002\000\022\002\ufffe\011\ufffe" +
    "\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\001" +
    "\002\000\022\002\ufffa\011\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\001\002\000\004\021\044\001" +
    "\002\000\010\004\026\017\024\030\016\001\002\000\010" +
    "\004\026\017\024\030\016\001\002\000\014\005\033\013" +
    "\034\015\032\020\031\021\035\001\002\000\024\005\ufff2" +
    "\007\ufff2\010\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\020" +
    "\ufff2\021\ufff2\001\002\000\024\005\ufff4\007\ufff4\010\ufff4" +
    "\013\ufff4\014\ufff4\015\ufff4\016\ufff4\020\ufff4\021\ufff4\001" +
    "\002\000\024\005\ufff1\007\ufff1\010\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\020\ufff1\021\ufff1\001\002\000\010\004" +
    "\026\017\024\030\016\001\002\000\010\004\026\017\024" +
    "\030\016\001\002\000\010\004\026\017\024\030\016\001" +
    "\002\000\010\004\026\017\024\030\016\001\002\000\022" +
    "\002\ufff7\011\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\001\002\000\024\005\uffed\007\uffed\010\uffed" +
    "\013\uffed\014\uffed\015\uffed\016\uffed\020\uffed\021\uffed\001" +
    "\002\000\024\005\ufff0\007\ufff0\010\ufff0\013\034\014\ufff0" +
    "\015\032\016\ufff0\020\ufff0\021\ufff0\001\002\000\024\005" +
    "\uffee\007\uffee\010\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\020\uffee\021\uffee\001\002\000\024\005\uffef\007\uffef\010" +
    "\uffef\013\034\014\uffef\015\032\016\uffef\020\uffef\021\uffef" +
    "\001\002\000\014\005\033\013\034\015\032\016\043\020" +
    "\031\001\002\000\024\005\ufff3\007\ufff3\010\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3\001\002\000" +
    "\022\002\ufffb\011\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb" +
    "\027\ufffb\030\ufffb\001\002\000\004\017\uffe6\001\002\000" +
    "\004\017\047\001\002\000\006\016\053\030\050\001\002" +
    "\000\006\014\ufff6\016\ufff6\001\002\000\006\014\065\016" +
    "\066\001\002\000\006\014\uffea\016\uffea\001\002\000\004" +
    "\012\054\001\002\000\020\011\uffff\023\uffff\024\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\001\002\000\020\011\057" +
    "\023\017\024\010\025\012\026\056\027\023\030\016\001" +
    "\002\000\004\017\060\001\002\000\022\002\uffe5\011\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\001" +
    "\002\000\010\004\026\017\024\030\016\001\002\000\014" +
    "\005\033\013\034\015\032\016\062\020\031\001\002\000" +
    "\004\021\063\001\002\000\004\011\064\001\002\000\022" +
    "\002\uffe3\011\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\001\002\000\004\030\050\001\002\000\004" +
    "\012\067\001\002\000\020\011\uffff\023\uffff\024\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\001\002\000\020\011\072" +
    "\023\017\024\010\025\012\026\071\027\023\030\016\001" +
    "\002\000\004\017\073\001\002\000\022\002\uffe4\011\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\001" +
    "\002\000\010\004\026\017\024\030\016\001\002\000\014" +
    "\005\033\013\034\015\032\016\075\020\031\001\002\000" +
    "\004\021\076\001\002\000\004\011\077\001\002\000\022" +
    "\002\uffe2\011\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\001\002\000\006\014\uffe9\016\uffe9\001\002" +
    "\000\010\004\026\017\024\030\016\001\002\000\014\005" +
    "\033\013\034\015\032\020\031\021\103\001\002\000\022" +
    "\002\ufff5\011\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\001\002\000\010\004\026\017\024\030\016" +
    "\001\002\000\016\005\033\007\114\010\113\013\034\015" +
    "\032\020\031\001\002\000\004\016\107\001\002\000\004" +
    "\012\110\001\002\000\016\011\uffff\023\uffff\024\uffff\025" +
    "\uffff\027\uffff\030\uffff\001\002\000\016\011\112\023\017" +
    "\024\010\025\012\027\023\030\016\001\002\000\022\002" +
    "\uffdd\011\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\001\002\000\010\004\026\017\024\030\016\001" +
    "\002\000\010\004\026\017\024\030\016\001\002\000\014" +
    "\005\033\013\034\015\032\016\uffec\020\031\001\002\000" +
    "\014\005\033\013\034\015\032\016\uffeb\020\031\001\002" +
    "\000\010\004\026\017\024\030\016\001\002\000\004\016" +
    "\121\001\002\000\004\012\122\001\002\000\016\011\uffff" +
    "\023\uffff\024\uffff\025\uffff\027\uffff\030\uffff\001\002\000" +
    "\016\011\124\023\017\024\010\025\012\027\023\030\016" +
    "\001\002\000\024\002\uffdf\011\uffdf\022\125\023\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\001\002\000\004" +
    "\012\126\001\002\000\016\011\uffff\023\uffff\024\uffff\025" +
    "\uffff\027\uffff\030\uffff\001\002\000\016\011\130\023\017" +
    "\024\010\025\012\027\023\030\016\001\002\000\022\002" +
    "\uffde\011\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\001\002\000\012\004\026\016\132\017\024\030" +
    "\016\001\002\000\024\005\uffe0\007\uffe0\010\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\020\uffe0\021\uffe0\001\002\000" +
    "\006\014\135\016\136\001\002\000\016\005\033\013\034" +
    "\014\uffe8\015\032\016\uffe8\020\031\001\002\000\010\004" +
    "\026\017\024\030\016\001\002\000\024\005\uffe1\007\uffe1" +
    "\010\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\021" +
    "\uffe1\001\002\000\016\005\033\013\034\014\uffe7\015\032" +
    "\016\uffe7\020\031\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\006\004\004\020\003\001\001\000\002\001" +
    "\001\000\024\002\013\005\017\006\010\007\006\010\021" +
    "\011\014\014\020\016\005\017\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\027\003\024\007\006\010\026\001\001\000\012" +
    "\002\027\003\041\007\006\010\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\027\003\040\007\006\010\026\001\001\000" +
    "\012\002\027\003\037\007\006\010\026\001\001\000\012" +
    "\002\027\003\036\007\006\010\026\001\001\000\012\002" +
    "\027\003\035\007\006\010\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\051\012\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\054\001" +
    "\001\000\024\002\013\005\017\006\010\007\006\010\021" +
    "\011\014\014\020\016\005\017\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\027\003\060\007\006" +
    "\010\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\077\001\001" +
    "\000\002\001\001\000\004\004\067\001\001\000\024\002" +
    "\013\005\017\006\010\007\006\010\021\011\014\014\020" +
    "\016\005\017\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\027\003\073\007\006\010\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\027\003\101" +
    "\007\006\010\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\002\027\003\104\007\006\010\026\015\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\110\001\001\000\024\002\013\005\017" +
    "\006\010\007\006\010\021\011\014\014\020\016\005\017" +
    "\012\001\001\000\002\001\001\000\012\002\027\003\115" +
    "\007\006\010\026\001\001\000\012\002\027\003\114\007" +
    "\006\010\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\002\027\003\104\007\006\010\026\015\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\122" +
    "\001\001\000\024\002\013\005\017\006\010\007\006\010" +
    "\021\011\014\014\020\016\005\017\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\126\001\001\000" +
    "\024\002\013\005\017\006\010\007\006\010\021\011\014" +
    "\014\020\016\005\017\012\001\001\000\002\001\001\000" +
    "\014\002\027\003\133\007\006\010\026\013\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\027\003\136\007\006\010\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LOOP ::= kwLoop kwRoundOpen BOOL_EXPRESSION kwRoundClose kwCurlyOpen INSTRUCTIONS kwCurlyClose 
            {
              InstrLoop RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instr be = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrInstructions is = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrLoop(be, is); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDITIONAL ::= kwIf kwRoundOpen BOOL_EXPRESSION kwRoundClose kwCurlyOpen INSTRUCTIONS kwCurlyClose kwElse kwCurlyOpen INSTRUCTIONS kwCurlyClose 
            {
              InstrConditional RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instr be = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int istleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int istright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		InstrInstructions ist = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int isfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrInstructions isf = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrConditional(be, ist, isf); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDITIONAL ::= kwIf kwRoundOpen BOOL_EXPRESSION kwRoundClose kwCurlyOpen INSTRUCTIONS kwCurlyClose 
            {
              InstrConditional RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instr be = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int istleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int istright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrInstructions ist = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrConditional(be, ist); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCTION_CALL ::= FUNCTION_NAME kwRoundOpen kwRoundClose 
            {
              InstrGetFunction RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstrGetFunction(fn); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCTION_CALL ::= FUNCTION_NAME kwRoundOpen ARGUMENT_LIST kwRoundClose 
            {
              InstrGetFunction RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArgList al = (ArgList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrGetFunction(fn, al); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCTION_DEF ::= kwFunction FUNCTION_NAME kwRoundOpen ARGUMENT_DEF kwRoundClose kwCurlyOpen INSTRUCTIONS kwReturn kwRoundOpen ARIT_EXPRESSION kwRoundClose kwEnd kwCurlyClose 
            {
              InstrSetFunction RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		List<String> ad = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		InstrInstructions is = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instr ae = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new InstrSetFunction(fn, ad, is, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCTION_DEF ::= kwFunction FUNCTION_NAME kwRoundOpen kwRoundClose kwCurlyOpen INSTRUCTIONS kwReturn kwRoundOpen ARIT_EXPRESSION kwRoundClose kwEnd kwCurlyClose 
            {
              InstrSetFunction RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		InstrInstructions is = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instr ae = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new InstrSetFunction(fn, is, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCTION_DEF ::= kwFunction FUNCTION_NAME kwRoundOpen ARGUMENT_DEF kwRoundClose kwCurlyOpen INSTRUCTIONS kwCurlyClose 
            {
              InstrSetFunction RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<String> ad = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrInstructions is = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrSetFunction(fn, ad, is); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCTION_DEF ::= kwFunction FUNCTION_NAME kwRoundOpen kwRoundClose kwCurlyOpen INSTRUCTIONS kwCurlyClose 
            {
              InstrSetFunction RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrInstructions is = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrSetFunction(fn, is); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCTION_NAME ::= identifier 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_NAME",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARGUMENT_LIST ::= ARGUMENT_LIST kwList ARIT_EXPRESSION 
            {
              ArgList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArgList al = (ArgList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr ae = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  al.add(ae);
                        RESULT = al;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENT_LIST",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARGUMENT_LIST ::= ARIT_EXPRESSION 
            {
              ArgList RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr ae = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgList(ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENT_LIST",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARGUMENT_DEF ::= ARGUMENT_DEF kwList VARIABLE 
            {
              List<String> RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> ad = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ad.add(v); RESULT = ad; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENT_DEF",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARGUMENT_DEF ::= VARIABLE 
            {
              List<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Arrays.asList(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENT_DEF",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BOOL_EXPRESSION ::= ARIT_EXPRESSION kwLess ARIT_EXPRESSION 
            {
              Instr RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ael = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr aer = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrBinaryOperation(BinaryOperator.LES, ael, aer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL_EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BOOL_EXPRESSION ::= ARIT_EXPRESSION kwEqual ARIT_EXPRESSION 
            {
              Instr RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ael = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr aer = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrBinaryOperation(BinaryOperator.EQU, ael, aer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL_EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARIT_EXPRESSION ::= ARIT_EXPRESSION kwDiv ARIT_EXPRESSION 
            {
              Instr RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ael = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr aer = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrBinaryOperation(BinaryOperator.DIV, ael, aer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARIT_EXPRESSION ::= ARIT_EXPRESSION kwMul ARIT_EXPRESSION 
            {
              Instr RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ael = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr aer = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrBinaryOperation(BinaryOperator.MUL, ael, aer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARIT_EXPRESSION ::= ARIT_EXPRESSION kwSub ARIT_EXPRESSION 
            {
              Instr RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ael = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr aer = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrBinaryOperation(BinaryOperator.SUB, ael, aer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARIT_EXPRESSION ::= ARIT_EXPRESSION kwAdd ARIT_EXPRESSION 
            {
              Instr RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ael = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr aer = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrBinaryOperation(BinaryOperator.ADD, ael, aer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARIT_EXPRESSION ::= VARIABLE 
            {
              Instr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrGetVariable(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARIT_EXPRESSION ::= literalInteger 
            {
              Instr RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = InstrConstant.fromString(li); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARIT_EXPRESSION ::= kwRoundOpen ARIT_EXPRESSION kwRoundClose 
            {
              Instr RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instr ae = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ae; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARIT_EXPRESSION ::= FUNCTION_CALL 
            {
              Instr RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrGetFunction fc = (InstrGetFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VAR_ASSIGN ::= VARIABLE kwAssign ARIT_EXPRESSION kwEnd 
            {
              InstrSetVariable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instr ae = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrSetVariable(v, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_ASSIGN",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIABLE ::= identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ECHO ::= kwEcho ARIT_EXPRESSION kwEnd 
            {
              InstrEcho RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instr ae = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrEcho(ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ECHO",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= ECHO 
            {
              Instr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrEcho e = (InstrEcho)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= LOOP 
            {
              Instr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrLoop l = (InstrLoop)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= CONDITIONAL 
            {
              Instr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrConditional c = (InstrConditional)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= FUNCTION_CALL kwEnd 
            {
              Instr RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrGetFunction fc = (InstrGetFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = fc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= FUNCTION_DEF 
            {
              Instr RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrSetFunction fd = (InstrSetFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTION ::= VAR_ASSIGN 
            {
              Instr RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrSetVariable va = (InstrSetVariable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = va; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              InstrInstructions RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrInstructions is = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr i = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = is;
                        RESULT.addInstruction(i);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCTIONS ::= 
            {
              InstrInstructions RESULT =null;
		  RESULT = new InstrInstructions(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SCRIPT ::= INSTRUCTIONS 
            {
              InstrScript RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrInstructions is = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrScript(is); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SCRIPT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrScript start_val = (InstrScript)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

