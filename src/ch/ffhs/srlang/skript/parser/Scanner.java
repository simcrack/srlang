/* The following code was generated by JFlex 1.4.3 on 23.06.21 14:20 */

package ch.ffhs.srlang.skript.parser;

import java_cup.runtime.Symbol;
import static ch.ffhs.srlang.skript.parser.Terminals.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23.06.21 14:20 from the specification file
 * <tt>./grammars/Scanner.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\16\2\0\1\14\22\0\1\17\7\0\1\7\1\10"+
    "\1\3\1\1\1\0\1\2\1\0\1\4\12\11\1\5\1\15\1\0"+
    "\1\6\3\0\32\13\6\12\32\13\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\12\1\14\377\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\20\0\20\0\20\0\20\0\40\0\60\0\20"+
    "\0\20\0\100\0\120\0\140\0\20\0\160\0\200\0\20"+
    "\0\220\0\240\0\260\0\300\0\320\0\340\0\360\0\u0100"+
    "\0\u0110\0\u0120\0\u0130\0\u0140\0\u0150\0\u0160\0\u0170\0\u0180"+
    "\0\u0190\0\u01a0\0\u01b0\0\u01c0\0\u01d0\0\u01e0\0\u01f0\0\u0200"+
    "\0\u0210\0\u0220\0\u0230\0\u0240\0\u0250\0\u0260\0\u0270\0\u0280"+
    "\0\u0290\0\u02a0\0\u02b0\0\u02c0\0\u02d0\0\u02e0\0\u02f0\0\u0300"+
    "\0\u0310\0\u0320\0\u0330\0\u0340\0\u0350\0\u0360\0\u0370\0\u0380"+
    "\0\u0390\0\u03a0\0\u03b0\0\u03c0\0\u03d0\0\u03e0\0\u03f0\0\u0400"+
    "\0\u0410\0\u0420\0\u0430\0\u0440\0\u0450\0\u0460\0\u0470\0\u0480"+
    "\0\u0490\0\u04a0\0\u04b0\0\u04c0\0\u04d0\0\u04e0\0\u04f0\0\u0500"+
    "\0\u0510\0\u0520\0\u0530\0\u0540\0\u0550\0\u0560\0\u0570\0\u0580"+
    "\0\u0590\0\u05a0\0\u05b0\0\u05c0\0\u05d0\0\u05e0\0\u05f0\0\u0600"+
    "\0\u0610\0\u0620\0\u0630\0\u0640\0\u0650\0\u0660\0\u0670\0\u0680"+
    "\0\u0690\0\u06a0\0\u06b0\0\u06c0\0\u06d0\0\u06e0\0\u06f0\0\u0700"+
    "\0\u0710\0\u0720\0\u0730\0\u0740\0\u0750\0\u0760\0\u0770\0\u0780"+
    "\0\u0790\0\u07a0\0\u07b0\0\u07c0\0\u07d0\0\u07e0\0\u07f0\0\u0800"+
    "\0\u0810\0\u0820\0\u0830\0\u0840\0\u0850\0\u0860\0\u0870\0\u0880"+
    "\0\u0890\0\u08a0\0\u08b0\0\u08c0\0\u08d0\0\u08e0\0\u08f0\0\u0900"+
    "\0\u0910\0\u0920\0\u0930\0\u0940\0\u0950\0\u0960\0\u0970\0\u0980"+
    "\0\u0990\0\u09a0\0\u09b0\0\u09c0\0\u09d0\0\u09e0\0\u09f0\0\u0a00"+
    "\0\u0a10\0\u0a20\0\u0a30\0\u0a40\0\u0a50\0\u0a60\0\u0a70\0\u0a80"+
    "\0\u0a90\0\u0aa0\0\u0ab0\0\u0ac0\0\u0ad0\0\u0ae0\0\u0af0\0\u0b00"+
    "\0\u0b10\0\u0b20\0\u0b30\0\u0b40\0\u0b50\0\u0b60\0\u0b70\0\u0b80"+
    "\0\u0b90\0\u0ba0\0\u0bb0\0\u0bc0\0\u0bd0\0\u0be0\0\u0bf0\0\u0c00"+
    "\0\u0c10\0\u0c20\0\u0c30\0\u0c40\0\u0c50\0\u0c60\0\u0c70\0\u0c80"+
    "\0\u0c90\0\u0ca0\0\u0cb0\0\u0cc0\0\u0cd0\0\u0ce0\0\u0cf0\0\u0d00"+
    "\0\u0d10\0\u0d20\0\u0d30\0\u0d40\0\u0d50\0\u0d60\0\u0d70\0\u0d80"+
    "\0\u0d90\0\u0da0\0\u0db0\0\u0dc0\0\u0dd0\0\u0de0\0\u0df0\0\u0e00"+
    "\0\u0e10\0\u0e20\0\u0e30\0\u0e40\0\u0e50\0\u0e60\0\u0e70\0\u0e80"+
    "\0\u0e90\0\u0ea0\0\u0eb0\0\u0ec0\0\u0ed0\0\u0ee0\0\u0ef0\0\u0f00"+
    "\0\u0f10\0\u0f20\0\u0f30\0\u0f40\0\u0f50\0\u0f60\0\u0f70\0\u0f80"+
    "\0\u0f90\0\u0fa0\0\u0fb0\0\u0fc0\0\u0fd0\0\u0fe0\0\u0ff0\0\u1000"+
    "\0\u1010\0\u1020\0\u1030\0\u1040\0\u1050\0\u1060\0\20";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\2\13\1\14\1\15\1\14\1\16\24\0"+
    "\1\17\21\0\1\20\22\0\1\12\17\0\1\21\1\0"+
    "\1\21\20\0\1\14\1\0\1\14\20\0\1\16\16\17"+
    "\1\0\1\17\11\0\1\22\1\0\1\22\15\0\1\23"+
    "\1\0\1\23\15\0\1\24\1\0\1\24\15\0\1\25"+
    "\1\0\1\25\15\0\1\26\1\0\1\26\15\0\1\27"+
    "\1\0\1\27\15\0\1\30\1\0\1\30\15\0\1\31"+
    "\1\0\1\31\15\0\1\32\1\0\1\32\15\0\1\33"+
    "\1\0\1\33\15\0\1\34\1\0\1\34\15\0\1\35"+
    "\1\0\1\35\15\0\1\36\1\0\1\36\15\0\1\37"+
    "\1\0\1\37\15\0\1\40\1\0\1\40\15\0\1\41"+
    "\1\0\1\41\15\0\1\42\1\0\1\42\15\0\1\43"+
    "\1\0\1\43\15\0\1\44\1\0\1\44\15\0\1\45"+
    "\1\0\1\45\15\0\1\46\1\0\1\46\15\0\1\47"+
    "\1\0\1\47\15\0\1\50\1\0\1\50\15\0\1\51"+
    "\1\0\1\51\15\0\1\52\1\0\1\52\15\0\1\53"+
    "\1\0\1\53\15\0\1\54\1\0\1\54\15\0\1\55"+
    "\1\0\1\55\15\0\1\56\1\0\1\56\15\0\1\57"+
    "\1\0\1\57\15\0\1\60\1\0\1\60\15\0\1\61"+
    "\1\0\1\61\15\0\1\62\1\0\1\62\15\0\1\63"+
    "\1\0\1\63\15\0\1\64\1\0\1\64\15\0\1\65"+
    "\1\0\1\65\15\0\1\66\1\0\1\66\15\0\1\67"+
    "\1\0\1\67\15\0\1\70\1\0\1\70\15\0\1\71"+
    "\1\0\1\71\15\0\1\72\1\0\1\72\15\0\1\73"+
    "\1\0\1\73\15\0\1\74\1\0\1\74\15\0\1\75"+
    "\1\0\1\75\15\0\1\76\1\0\1\76\15\0\1\77"+
    "\1\0\1\77\15\0\1\100\1\0\1\100\15\0\1\101"+
    "\1\0\1\101\15\0\1\102\1\0\1\102\15\0\1\103"+
    "\1\0\1\103\15\0\1\104\1\0\1\104\15\0\1\105"+
    "\1\0\1\105\15\0\1\106\1\0\1\106\15\0\1\107"+
    "\1\0\1\107\15\0\1\110\1\0\1\110\15\0\1\111"+
    "\1\0\1\111\15\0\1\112\1\0\1\112\15\0\1\113"+
    "\1\0\1\113\15\0\1\114\1\0\1\114\15\0\1\115"+
    "\1\0\1\115\15\0\1\116\1\0\1\116\15\0\1\117"+
    "\1\0\1\117\15\0\1\120\1\0\1\120\15\0\1\121"+
    "\1\0\1\121\15\0\1\122\1\0\1\122\15\0\1\123"+
    "\1\0\1\123\15\0\1\124\1\0\1\124\15\0\1\125"+
    "\1\0\1\125\15\0\1\126\1\0\1\126\15\0\1\127"+
    "\1\0\1\127\15\0\1\130\1\0\1\130\15\0\1\131"+
    "\1\0\1\131\15\0\1\132\1\0\1\132\15\0\1\133"+
    "\1\0\1\133\15\0\1\134\1\0\1\134\15\0\1\135"+
    "\1\0\1\135\15\0\1\136\1\0\1\136\15\0\1\137"+
    "\1\0\1\137\15\0\1\140\1\0\1\140\15\0\1\141"+
    "\1\0\1\141\15\0\1\142\1\0\1\142\15\0\1\143"+
    "\1\0\1\143\15\0\1\144\1\0\1\144\15\0\1\145"+
    "\1\0\1\145\15\0\1\146\1\0\1\146\15\0\1\147"+
    "\1\0\1\147\15\0\1\150\1\0\1\150\15\0\1\151"+
    "\1\0\1\151\15\0\1\152\1\0\1\152\15\0\1\153"+
    "\1\0\1\153\15\0\1\154\1\0\1\154\15\0\1\155"+
    "\1\0\1\155\15\0\1\156\1\0\1\156\15\0\1\157"+
    "\1\0\1\157\15\0\1\160\1\0\1\160\15\0\1\161"+
    "\1\0\1\161\15\0\1\162\1\0\1\162\15\0\1\163"+
    "\1\0\1\163\15\0\1\164\1\0\1\164\15\0\1\165"+
    "\1\0\1\165\15\0\1\166\1\0\1\166\15\0\1\167"+
    "\1\0\1\167\15\0\1\170\1\0\1\170\15\0\1\171"+
    "\1\0\1\171\15\0\1\172\1\0\1\172\15\0\1\173"+
    "\1\0\1\173\15\0\1\174\1\0\1\174\15\0\1\175"+
    "\1\0\1\175\15\0\1\176\1\0\1\176\15\0\1\177"+
    "\1\0\1\177\15\0\1\200\1\0\1\200\15\0\1\201"+
    "\1\0\1\201\15\0\1\202\1\0\1\202\15\0\1\203"+
    "\1\0\1\203\15\0\1\204\1\0\1\204\15\0\1\205"+
    "\1\0\1\205\15\0\1\206\1\0\1\206\15\0\1\207"+
    "\1\0\1\207\15\0\1\210\1\0\1\210\15\0\1\211"+
    "\1\0\1\211\15\0\1\212\1\0\1\212\15\0\1\213"+
    "\1\0\1\213\15\0\1\214\1\0\1\214\15\0\1\215"+
    "\1\0\1\215\15\0\1\216\1\0\1\216\15\0\1\217"+
    "\1\0\1\217\15\0\1\220\1\0\1\220\15\0\1\221"+
    "\1\0\1\221\15\0\1\222\1\0\1\222\15\0\1\223"+
    "\1\0\1\223\15\0\1\224\1\0\1\224\15\0\1\225"+
    "\1\0\1\225\15\0\1\226\1\0\1\226\15\0\1\227"+
    "\1\0\1\227\15\0\1\230\1\0\1\230\15\0\1\231"+
    "\1\0\1\231\15\0\1\232\1\0\1\232\15\0\1\233"+
    "\1\0\1\233\15\0\1\234\1\0\1\234\15\0\1\235"+
    "\1\0\1\235\15\0\1\236\1\0\1\236\15\0\1\237"+
    "\1\0\1\237\15\0\1\240\1\0\1\240\15\0\1\241"+
    "\1\0\1\241\15\0\1\242\1\0\1\242\15\0\1\243"+
    "\1\0\1\243\15\0\1\244\1\0\1\244\15\0\1\245"+
    "\1\0\1\245\15\0\1\246\1\0\1\246\15\0\1\247"+
    "\1\0\1\247\15\0\1\250\1\0\1\250\15\0\1\251"+
    "\1\0\1\251\15\0\1\252\1\0\1\252\15\0\1\253"+
    "\1\0\1\253\15\0\1\254\1\0\1\254\15\0\1\255"+
    "\1\0\1\255\15\0\1\256\1\0\1\256\15\0\1\257"+
    "\1\0\1\257\15\0\1\260\1\0\1\260\15\0\1\261"+
    "\1\0\1\261\15\0\1\262\1\0\1\262\15\0\1\263"+
    "\1\0\1\263\15\0\1\264\1\0\1\264\15\0\1\265"+
    "\1\0\1\265\15\0\1\266\1\0\1\266\15\0\1\267"+
    "\1\0\1\267\15\0\1\270\1\0\1\270\15\0\1\271"+
    "\1\0\1\271\15\0\1\272\1\0\1\272\15\0\1\273"+
    "\1\0\1\273\15\0\1\274\1\0\1\274\15\0\1\275"+
    "\1\0\1\275\15\0\1\276\1\0\1\276\15\0\1\277"+
    "\1\0\1\277\15\0\1\300\1\0\1\300\15\0\1\301"+
    "\1\0\1\301\15\0\1\302\1\0\1\302\15\0\1\303"+
    "\1\0\1\303\15\0\1\304\1\0\1\304\15\0\1\305"+
    "\1\0\1\305\15\0\1\306\1\0\1\306\15\0\1\307"+
    "\1\0\1\307\15\0\1\310\1\0\1\310\15\0\1\311"+
    "\1\0\1\311\15\0\1\312\1\0\1\312\15\0\1\313"+
    "\1\0\1\313\15\0\1\314\1\0\1\314\15\0\1\315"+
    "\1\0\1\315\15\0\1\316\1\0\1\316\15\0\1\317"+
    "\1\0\1\317\15\0\1\320\1\0\1\320\15\0\1\321"+
    "\1\0\1\321\15\0\1\322\1\0\1\322\15\0\1\323"+
    "\1\0\1\323\15\0\1\324\1\0\1\324\15\0\1\325"+
    "\1\0\1\325\15\0\1\326\1\0\1\326\15\0\1\327"+
    "\1\0\1\327\15\0\1\330\1\0\1\330\15\0\1\331"+
    "\1\0\1\331\15\0\1\332\1\0\1\332\15\0\1\333"+
    "\1\0\1\333\15\0\1\334\1\0\1\334\15\0\1\335"+
    "\1\0\1\335\15\0\1\336\1\0\1\336\15\0\1\337"+
    "\1\0\1\337\15\0\1\340\1\0\1\340\15\0\1\341"+
    "\1\0\1\341\15\0\1\342\1\0\1\342\15\0\1\343"+
    "\1\0\1\343\15\0\1\344\1\0\1\344\15\0\1\345"+
    "\1\0\1\345\15\0\1\346\1\0\1\346\15\0\1\347"+
    "\1\0\1\347\15\0\1\350\1\0\1\350\15\0\1\351"+
    "\1\0\1\351\15\0\1\352\1\0\1\352\15\0\1\353"+
    "\1\0\1\353\15\0\1\354\1\0\1\354\15\0\1\355"+
    "\1\0\1\355\15\0\1\356\1\0\1\356\15\0\1\357"+
    "\1\0\1\357\15\0\1\360\1\0\1\360\15\0\1\361"+
    "\1\0\1\361\15\0\1\362\1\0\1\362\15\0\1\363"+
    "\1\0\1\363\15\0\1\364\1\0\1\364\15\0\1\365"+
    "\1\0\1\365\15\0\1\366\1\0\1\366\15\0\1\367"+
    "\1\0\1\367\15\0\1\370\1\0\1\370\15\0\1\371"+
    "\1\0\1\371\15\0\1\372\1\0\1\372\15\0\1\373"+
    "\1\0\1\373\15\0\1\374\1\0\1\374\15\0\1\375"+
    "\1\0\1\375\15\0\1\376\1\0\1\376\15\0\1\377"+
    "\1\0\1\377\15\0\1\u0100\1\0\1\u0100\15\0\1\u0101"+
    "\1\0\1\u0101\15\0\1\u0102\1\0\1\u0102\15\0\1\u0103"+
    "\1\0\1\u0103\15\0\1\u0104\1\0\1\u0104\15\0\1\u0105"+
    "\1\0\1\u0105\15\0\1\u0106\1\0\1\u0106\15\0\1\u0107"+
    "\1\0\1\u0107\15\0\1\u0108\1\0\1\u0108\15\0\1\u0109"+
    "\1\0\1\u0109\15\0\1\u010a\1\0\1\u010a\15\0\1\u010b"+
    "\1\0\1\u010b\15\0\1\u010c\1\0\1\u010c\15\0\1\u010d"+
    "\1\0\1\u010d\15\0\1\u010e\1\0\1\u010e\15\0\1\u010f"+
    "\1\0\1\u010f\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4208];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\2\1\2\11\3\1\1\11\2\1\1\11"+
    "\376\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol sym(int type)
    {
         return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symVal(int type)
    {
         return new Symbol(type, yyline, yycolumn, yytext());
    }
   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 52) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return sym(kwMul);
          }
        case 13: break;
        case 5: 
          { return sym(kwDiv);
          }
        case 14: break;
        case 6: 
          { return sym(kwRoundOpen);
          }
        case 15: break;
        case 8: 
          { return symVal(literalInteger);
          }
        case 16: break;
        case 3: 
          { return sym(kwSub);
          }
        case 17: break;
        case 7: 
          { return sym(kwRoundClose);
          }
        case 18: break;
        case 1: 
          { throw new RuntimeException("Illegal Symbol '" + yytext() + "' in line " + yyline + ", column " + yycolumn);
          }
        case 19: break;
        case 12: 
          { return sym(kwAssign);
          }
        case 20: break;
        case 2: 
          { return sym(kwAdd);
          }
        case 21: break;
        case 11: 
          { return sym(kwEnd);
          }
        case 22: break;
        case 9: 
          { return symVal(identifier);
          }
        case 23: break;
        case 10: 
          { 
          }
        case 24: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Terminals.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
