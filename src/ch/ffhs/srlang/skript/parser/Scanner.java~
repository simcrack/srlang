/* The following code was generated by JFlex 1.4.3 on 23.06.21 14:45 */

package ch.ffhs.srlang.skript.parser;

import java_cup.runtime.Symbol;
import static ch.ffhs.srlang.skript.parser.Terminals.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23.06.21 14:45 from the specification file
 * <tt>./grammars/Scanner.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\16\1\15\2\0\1\14\22\0\1\16\7\0\1\7\1\10"+
    "\1\3\1\1\1\0\1\2\1\0\1\4\12\11\1\5\2\0\1\6"+
    "\3\0\32\13\6\12\32\13\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\2\13\1\14\377\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\17\0\17\0\17\0\17\0\36\0\55\0\17"+
    "\0\17\0\74\0\113\0\132\0\151\0\170\0\17\0\207"+
    "\0\226\0\245\0\264\0\303\0\322\0\341\0\360\0\377"+
    "\0\u010e\0\u011d\0\u012c\0\u013b\0\u014a\0\u0159\0\u0168\0\u0177"+
    "\0\u0186\0\u0195\0\u01a4\0\u01b3\0\u01c2\0\u01d1\0\u01e0\0\u01ef"+
    "\0\u01fe\0\u020d\0\u021c\0\u022b\0\u023a\0\u0249\0\u0258\0\u0267"+
    "\0\u0276\0\u0285\0\u0294\0\u02a3\0\u02b2\0\u02c1\0\u02d0\0\u02df"+
    "\0\u02ee\0\u02fd\0\u030c\0\u031b\0\u032a\0\u0339\0\u0348\0\u0357"+
    "\0\u0366\0\u0375\0\u0384\0\u0393\0\u03a2\0\u03b1\0\u03c0\0\u03cf"+
    "\0\u03de\0\u03ed\0\u03fc\0\u040b\0\u041a\0\u0429\0\u0438\0\u0447"+
    "\0\u0456\0\u0465\0\u0474\0\u0483\0\u0492\0\u04a1\0\u04b0\0\u04bf"+
    "\0\u04ce\0\u04dd\0\u04ec\0\u04fb\0\u050a\0\u0519\0\u0528\0\u0537"+
    "\0\u0546\0\u0555\0\u0564\0\u0573\0\u0582\0\u0591\0\u05a0\0\u05af"+
    "\0\u05be\0\u05cd\0\u05dc\0\u05eb\0\u05fa\0\u0609\0\u0618\0\u0627"+
    "\0\u0636\0\u0645\0\u0654\0\u0663\0\u0672\0\u0681\0\u0690\0\u069f"+
    "\0\u06ae\0\u06bd\0\u06cc\0\u06db\0\u06ea\0\u06f9\0\u0708\0\u0717"+
    "\0\u0726\0\u0735\0\u0744\0\u0753\0\u0762\0\u0771\0\u0780\0\u078f"+
    "\0\u079e\0\u07ad\0\u07bc\0\u07cb\0\u07da\0\u07e9\0\u07f8\0\u0807"+
    "\0\u0816\0\u0825\0\u0834\0\u0843\0\u0852\0\u0861\0\u0870\0\u087f"+
    "\0\u088e\0\u089d\0\u08ac\0\u08bb\0\u08ca\0\u08d9\0\u08e8\0\u08f7"+
    "\0\u0906\0\u0915\0\u0924\0\u0933\0\u0942\0\u0951\0\u0960\0\u096f"+
    "\0\u097e\0\u098d\0\u099c\0\u09ab\0\u09ba\0\u09c9\0\u09d8\0\u09e7"+
    "\0\u09f6\0\u0a05\0\u0a14\0\u0a23\0\u0a32\0\u0a41\0\u0a50\0\u0a5f"+
    "\0\u0a6e\0\u0a7d\0\u0a8c\0\u0a9b\0\u0aaa\0\u0ab9\0\u0ac8\0\u0ad7"+
    "\0\u0ae6\0\u0af5\0\u0b04\0\u0b13\0\u0b22\0\u0b31\0\u0b40\0\u0b4f"+
    "\0\u0b5e\0\u0b6d\0\u0b7c\0\u0b8b\0\u0b9a\0\u0ba9\0\u0bb8\0\u0bc7"+
    "\0\u0bd6\0\u0be5\0\u0bf4\0\u0c03\0\u0c12\0\u0c21\0\u0c30\0\u0c3f"+
    "\0\u0c4e\0\u0c5d\0\u0c6c\0\u0c7b\0\u0c8a\0\u0c99\0\u0ca8\0\u0cb7"+
    "\0\u0cc6\0\u0cd5\0\u0ce4\0\u0cf3\0\u0d02\0\u0d11\0\u0d20\0\u0d2f"+
    "\0\u0d3e\0\u0d4d\0\u0d5c\0\u0d6b\0\u0d7a\0\u0d89\0\u0d98\0\u0da7"+
    "\0\u0db6\0\u0dc5\0\u0dd4\0\u0de3\0\u0df2\0\u0e01\0\u0e10\0\u0e1f"+
    "\0\u0e2e\0\u0e3d\0\u0e4c\0\u0e5b\0\u0e6a\0\u0e79\0\u0e88\0\u0e97"+
    "\0\u0ea6\0\u0eb5\0\u0ec4\0\u0ed3\0\u0ee2\0\u0ef1\0\u0f00\0\u0f0f"+
    "\0\u0f1e\0\u0f2d\0\u0f3c\0\u0f4b\0\u0f5a\0\17";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\2\13\2\14\1\15\23\0\1\16\20\0"+
    "\1\17\21\0\1\12\16\0\1\20\1\0\1\20\17\0"+
    "\2\14\17\0\1\15\15\16\1\0\1\16\11\0\1\21"+
    "\1\0\1\21\14\0\1\22\1\0\1\22\14\0\1\23"+
    "\1\0\1\23\14\0\1\24\1\0\1\24\14\0\1\25"+
    "\1\0\1\25\14\0\1\26\1\0\1\26\14\0\1\27"+
    "\1\0\1\27\14\0\1\30\1\0\1\30\14\0\1\31"+
    "\1\0\1\31\14\0\1\32\1\0\1\32\14\0\1\33"+
    "\1\0\1\33\14\0\1\34\1\0\1\34\14\0\1\35"+
    "\1\0\1\35\14\0\1\36\1\0\1\36\14\0\1\37"+
    "\1\0\1\37\14\0\1\40\1\0\1\40\14\0\1\41"+
    "\1\0\1\41\14\0\1\42\1\0\1\42\14\0\1\43"+
    "\1\0\1\43\14\0\1\44\1\0\1\44\14\0\1\45"+
    "\1\0\1\45\14\0\1\46\1\0\1\46\14\0\1\47"+
    "\1\0\1\47\14\0\1\50\1\0\1\50\14\0\1\51"+
    "\1\0\1\51\14\0\1\52\1\0\1\52\14\0\1\53"+
    "\1\0\1\53\14\0\1\54\1\0\1\54\14\0\1\55"+
    "\1\0\1\55\14\0\1\56\1\0\1\56\14\0\1\57"+
    "\1\0\1\57\14\0\1\60\1\0\1\60\14\0\1\61"+
    "\1\0\1\61\14\0\1\62\1\0\1\62\14\0\1\63"+
    "\1\0\1\63\14\0\1\64\1\0\1\64\14\0\1\65"+
    "\1\0\1\65\14\0\1\66\1\0\1\66\14\0\1\67"+
    "\1\0\1\67\14\0\1\70\1\0\1\70\14\0\1\71"+
    "\1\0\1\71\14\0\1\72\1\0\1\72\14\0\1\73"+
    "\1\0\1\73\14\0\1\74\1\0\1\74\14\0\1\75"+
    "\1\0\1\75\14\0\1\76\1\0\1\76\14\0\1\77"+
    "\1\0\1\77\14\0\1\100\1\0\1\100\14\0\1\101"+
    "\1\0\1\101\14\0\1\102\1\0\1\102\14\0\1\103"+
    "\1\0\1\103\14\0\1\104\1\0\1\104\14\0\1\105"+
    "\1\0\1\105\14\0\1\106\1\0\1\106\14\0\1\107"+
    "\1\0\1\107\14\0\1\110\1\0\1\110\14\0\1\111"+
    "\1\0\1\111\14\0\1\112\1\0\1\112\14\0\1\113"+
    "\1\0\1\113\14\0\1\114\1\0\1\114\14\0\1\115"+
    "\1\0\1\115\14\0\1\116\1\0\1\116\14\0\1\117"+
    "\1\0\1\117\14\0\1\120\1\0\1\120\14\0\1\121"+
    "\1\0\1\121\14\0\1\122\1\0\1\122\14\0\1\123"+
    "\1\0\1\123\14\0\1\124\1\0\1\124\14\0\1\125"+
    "\1\0\1\125\14\0\1\126\1\0\1\126\14\0\1\127"+
    "\1\0\1\127\14\0\1\130\1\0\1\130\14\0\1\131"+
    "\1\0\1\131\14\0\1\132\1\0\1\132\14\0\1\133"+
    "\1\0\1\133\14\0\1\134\1\0\1\134\14\0\1\135"+
    "\1\0\1\135\14\0\1\136\1\0\1\136\14\0\1\137"+
    "\1\0\1\137\14\0\1\140\1\0\1\140\14\0\1\141"+
    "\1\0\1\141\14\0\1\142\1\0\1\142\14\0\1\143"+
    "\1\0\1\143\14\0\1\144\1\0\1\144\14\0\1\145"+
    "\1\0\1\145\14\0\1\146\1\0\1\146\14\0\1\147"+
    "\1\0\1\147\14\0\1\150\1\0\1\150\14\0\1\151"+
    "\1\0\1\151\14\0\1\152\1\0\1\152\14\0\1\153"+
    "\1\0\1\153\14\0\1\154\1\0\1\154\14\0\1\155"+
    "\1\0\1\155\14\0\1\156\1\0\1\156\14\0\1\157"+
    "\1\0\1\157\14\0\1\160\1\0\1\160\14\0\1\161"+
    "\1\0\1\161\14\0\1\162\1\0\1\162\14\0\1\163"+
    "\1\0\1\163\14\0\1\164\1\0\1\164\14\0\1\165"+
    "\1\0\1\165\14\0\1\166\1\0\1\166\14\0\1\167"+
    "\1\0\1\167\14\0\1\170\1\0\1\170\14\0\1\171"+
    "\1\0\1\171\14\0\1\172\1\0\1\172\14\0\1\173"+
    "\1\0\1\173\14\0\1\174\1\0\1\174\14\0\1\175"+
    "\1\0\1\175\14\0\1\176\1\0\1\176\14\0\1\177"+
    "\1\0\1\177\14\0\1\200\1\0\1\200\14\0\1\201"+
    "\1\0\1\201\14\0\1\202\1\0\1\202\14\0\1\203"+
    "\1\0\1\203\14\0\1\204\1\0\1\204\14\0\1\205"+
    "\1\0\1\205\14\0\1\206\1\0\1\206\14\0\1\207"+
    "\1\0\1\207\14\0\1\210\1\0\1\210\14\0\1\211"+
    "\1\0\1\211\14\0\1\212\1\0\1\212\14\0\1\213"+
    "\1\0\1\213\14\0\1\214\1\0\1\214\14\0\1\215"+
    "\1\0\1\215\14\0\1\216\1\0\1\216\14\0\1\217"+
    "\1\0\1\217\14\0\1\220\1\0\1\220\14\0\1\221"+
    "\1\0\1\221\14\0\1\222\1\0\1\222\14\0\1\223"+
    "\1\0\1\223\14\0\1\224\1\0\1\224\14\0\1\225"+
    "\1\0\1\225\14\0\1\226\1\0\1\226\14\0\1\227"+
    "\1\0\1\227\14\0\1\230\1\0\1\230\14\0\1\231"+
    "\1\0\1\231\14\0\1\232\1\0\1\232\14\0\1\233"+
    "\1\0\1\233\14\0\1\234\1\0\1\234\14\0\1\235"+
    "\1\0\1\235\14\0\1\236\1\0\1\236\14\0\1\237"+
    "\1\0\1\237\14\0\1\240\1\0\1\240\14\0\1\241"+
    "\1\0\1\241\14\0\1\242\1\0\1\242\14\0\1\243"+
    "\1\0\1\243\14\0\1\244\1\0\1\244\14\0\1\245"+
    "\1\0\1\245\14\0\1\246\1\0\1\246\14\0\1\247"+
    "\1\0\1\247\14\0\1\250\1\0\1\250\14\0\1\251"+
    "\1\0\1\251\14\0\1\252\1\0\1\252\14\0\1\253"+
    "\1\0\1\253\14\0\1\254\1\0\1\254\14\0\1\255"+
    "\1\0\1\255\14\0\1\256\1\0\1\256\14\0\1\257"+
    "\1\0\1\257\14\0\1\260\1\0\1\260\14\0\1\261"+
    "\1\0\1\261\14\0\1\262\1\0\1\262\14\0\1\263"+
    "\1\0\1\263\14\0\1\264\1\0\1\264\14\0\1\265"+
    "\1\0\1\265\14\0\1\266\1\0\1\266\14\0\1\267"+
    "\1\0\1\267\14\0\1\270\1\0\1\270\14\0\1\271"+
    "\1\0\1\271\14\0\1\272\1\0\1\272\14\0\1\273"+
    "\1\0\1\273\14\0\1\274\1\0\1\274\14\0\1\275"+
    "\1\0\1\275\14\0\1\276\1\0\1\276\14\0\1\277"+
    "\1\0\1\277\14\0\1\300\1\0\1\300\14\0\1\301"+
    "\1\0\1\301\14\0\1\302\1\0\1\302\14\0\1\303"+
    "\1\0\1\303\14\0\1\304\1\0\1\304\14\0\1\305"+
    "\1\0\1\305\14\0\1\306\1\0\1\306\14\0\1\307"+
    "\1\0\1\307\14\0\1\310\1\0\1\310\14\0\1\311"+
    "\1\0\1\311\14\0\1\312\1\0\1\312\14\0\1\313"+
    "\1\0\1\313\14\0\1\314\1\0\1\314\14\0\1\315"+
    "\1\0\1\315\14\0\1\316\1\0\1\316\14\0\1\317"+
    "\1\0\1\317\14\0\1\320\1\0\1\320\14\0\1\321"+
    "\1\0\1\321\14\0\1\322\1\0\1\322\14\0\1\323"+
    "\1\0\1\323\14\0\1\324\1\0\1\324\14\0\1\325"+
    "\1\0\1\325\14\0\1\326\1\0\1\326\14\0\1\327"+
    "\1\0\1\327\14\0\1\330\1\0\1\330\14\0\1\331"+
    "\1\0\1\331\14\0\1\332\1\0\1\332\14\0\1\333"+
    "\1\0\1\333\14\0\1\334\1\0\1\334\14\0\1\335"+
    "\1\0\1\335\14\0\1\336\1\0\1\336\14\0\1\337"+
    "\1\0\1\337\14\0\1\340\1\0\1\340\14\0\1\341"+
    "\1\0\1\341\14\0\1\342\1\0\1\342\14\0\1\343"+
    "\1\0\1\343\14\0\1\344\1\0\1\344\14\0\1\345"+
    "\1\0\1\345\14\0\1\346\1\0\1\346\14\0\1\347"+
    "\1\0\1\347\14\0\1\350\1\0\1\350\14\0\1\351"+
    "\1\0\1\351\14\0\1\352\1\0\1\352\14\0\1\353"+
    "\1\0\1\353\14\0\1\354\1\0\1\354\14\0\1\355"+
    "\1\0\1\355\14\0\1\356\1\0\1\356\14\0\1\357"+
    "\1\0\1\357\14\0\1\360\1\0\1\360\14\0\1\361"+
    "\1\0\1\361\14\0\1\362\1\0\1\362\14\0\1\363"+
    "\1\0\1\363\14\0\1\364\1\0\1\364\14\0\1\365"+
    "\1\0\1\365\14\0\1\366\1\0\1\366\14\0\1\367"+
    "\1\0\1\367\14\0\1\370\1\0\1\370\14\0\1\371"+
    "\1\0\1\371\14\0\1\372\1\0\1\372\14\0\1\373"+
    "\1\0\1\373\14\0\1\374\1\0\1\374\14\0\1\375"+
    "\1\0\1\375\14\0\1\376\1\0\1\376\14\0\1\377"+
    "\1\0\1\377\14\0\1\u0100\1\0\1\u0100\14\0\1\u0101"+
    "\1\0\1\u0101\14\0\1\u0102\1\0\1\u0102\14\0\1\u0103"+
    "\1\0\1\u0103\14\0\1\u0104\1\0\1\u0104\14\0\1\u0105"+
    "\1\0\1\u0105\14\0\1\u0106\1\0\1\u0106\14\0\1\u0107"+
    "\1\0\1\u0107\14\0\1\u0108\1\0\1\u0108\14\0\1\u0109"+
    "\1\0\1\u0109\14\0\1\u010a\1\0\1\u010a\14\0\1\u010b"+
    "\1\0\1\u010b\14\0\1\u010c\1\0\1\u010c\14\0\1\u010d"+
    "\1\0\1\u010d\14\0\1\u010e\1\0\1\u010e\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3945];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\2\1\2\11\5\1\1\11\376\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol sym(int type)
    {
         return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symVal(int type)
    {
         return new Symbol(type, yyline, yycolumn, yytext());
    }
   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 50) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return sym(kwMul);
          }
        case 13: break;
        case 5: 
          { return sym(kwDiv);
          }
        case 14: break;
        case 6: 
          { return sym(kwRoundOpen);
          }
        case 15: break;
        case 8: 
          { return symVal(literalInteger);
          }
        case 16: break;
        case 3: 
          { return sym(kwSub);
          }
        case 17: break;
        case 7: 
          { return sym(kwRoundClose);
          }
        case 18: break;
        case 1: 
          { throw new RuntimeException("Illegal Symbol '" + yytext() + "' in line " + yyline + ", column " + yycolumn);
          }
        case 19: break;
        case 12: 
          { return sym(kwAssign);
          }
        case 20: break;
        case 2: 
          { return sym(kwAdd);
          }
        case 21: break;
        case 10: 
          { return sym(kwEnd);
          }
        case 22: break;
        case 9: 
          { return symVal(identifier);
          }
        case 23: break;
        case 11: 
          { 
          }
        case 24: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Terminals.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
