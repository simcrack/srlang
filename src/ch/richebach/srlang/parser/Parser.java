
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 24 19:56:29 CEST 2021
//----------------------------------------------------

package ch.richebach.srlang.parser;

import ch.richebach.srlang.instr.*;
import ch.richebach.srlang.BinOperator;
import ch.richebach.srlang.ArgList;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 24 19:56:29 CEST 2021
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\020\003\000\002\004" +
    "\002\000\002\004\004\000\002\005\003\000\002\005\003" +
    "\000\002\005\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\016\007\000\002\002\003\000\002" +
    "\006\006\000\002\003\003\000\002\003\005\000\002\003" +
    "\003\000\002\003\003\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\003\000\002" +
    "\012\003\000\002\012\005\000\002\013\003\000\002\013" +
    "\005\000\002\007\003\000\002\011\011\000\002\011\012" +
    "\000\002\011\016\000\002\011\017\000\002\010\006\000" +
    "\002\010\005\000\002\014\011\000\002\014\015\000\002" +
    "\017\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\016\002\uffff\025\uffff\026\uffff\027\uffff\031" +
    "\uffff\032\uffff\001\002\000\004\002\145\001\002\000\016" +
    "\002\000\025\017\026\010\027\012\031\023\032\016\001" +
    "\002\000\022\002\ufff8\013\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\001\002\000\004\021\136\001" +
    "\002\000\004\021\124\001\002\000\022\002\ufffd\013\ufffd" +
    "\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\001" +
    "\002\000\004\021\106\001\002\000\022\002\ufff9\013\ufff9" +
    "\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\001" +
    "\002\000\004\007\103\001\002\000\022\002\ufffc\013\ufffc" +
    "\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\001" +
    "\002\000\032\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\uffe4\022\ufff6\023" +
    "\ufff6\001\002\000\004\032\047\001\002\000\022\002\ufffe" +
    "\013\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032" +
    "\ufffe\001\002\000\022\002\ufffa\013\ufffa\025\ufffa\026\ufffa" +
    "\027\ufffa\030\ufffa\031\ufffa\032\ufffa\001\002\000\004\023" +
    "\046\001\002\000\004\021\024\001\002\000\010\004\027" +
    "\021\025\032\016\001\002\000\010\004\027\021\025\032" +
    "\016\001\002\000\014\006\034\015\035\017\033\020\036" +
    "\022\032\001\002\000\026\006\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2" +
    "\001\002\000\026\006\ufff4\010\ufff4\011\ufff4\012\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\022\ufff4\023\ufff4\001\002" +
    "\000\026\006\ufff1\010\ufff1\011\ufff1\012\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\022\ufff1\023\ufff1\001\002\000\010" +
    "\004\027\021\025\032\016\001\002\000\010\004\027\021" +
    "\025\032\016\001\002\000\010\004\027\021\025\032\016" +
    "\001\002\000\010\004\027\021\025\032\016\001\002\000" +
    "\004\023\037\001\002\000\022\002\ufff7\013\ufff7\025\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\001\002\000" +
    "\026\006\uffed\010\uffed\011\uffed\012\uffed\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\022\uffed\023\uffed\001\002\000\026\006" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\015\035\016\ufff0\017\033" +
    "\020\ufff0\022\ufff0\023\ufff0\001\002\000\026\006\uffee\010" +
    "\uffee\011\uffee\012\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\022\uffee\023\uffee\001\002\000\026\006\uffef\010\uffef\011" +
    "\uffef\012\uffef\015\035\016\uffef\017\033\020\uffef\022\uffef" +
    "\023\uffef\001\002\000\014\006\034\015\035\017\033\020" +
    "\045\022\032\001\002\000\026\006\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3\023" +
    "\ufff3\001\002\000\022\002\ufffb\013\ufffb\025\ufffb\026\ufffb" +
    "\027\ufffb\030\ufffb\031\ufffb\032\ufffb\001\002\000\004\021" +
    "\uffe4\001\002\000\004\021\051\001\002\000\006\020\055" +
    "\032\052\001\002\000\006\016\ufff6\020\ufff6\001\002\000" +
    "\006\016\067\020\070\001\002\000\006\016\uffe8\020\uffe8" +
    "\001\002\000\004\014\056\001\002\000\020\013\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\001\002" +
    "\000\020\013\061\025\017\026\010\027\012\030\060\031" +
    "\023\032\016\001\002\000\004\021\062\001\002\000\022" +
    "\002\uffe3\013\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\001\002\000\010\004\027\021\025\032\016" +
    "\001\002\000\014\006\034\015\035\017\033\020\064\022" +
    "\032\001\002\000\004\023\065\001\002\000\004\013\066" +
    "\001\002\000\022\002\uffe1\013\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\001\002\000\004\032\052" +
    "\001\002\000\004\014\071\001\002\000\020\013\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\001\002" +
    "\000\020\013\074\025\017\026\010\027\012\030\073\031" +
    "\023\032\016\001\002\000\004\021\075\001\002\000\022" +
    "\002\uffe2\013\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\001\002\000\010\004\027\021\025\032\016" +
    "\001\002\000\014\006\034\015\035\017\033\020\077\022" +
    "\032\001\002\000\004\023\100\001\002\000\004\013\101" +
    "\001\002\000\022\002\uffe0\013\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\001\002\000\006\016\uffe7" +
    "\020\uffe7\001\002\000\010\004\027\021\025\032\016\001" +
    "\002\000\014\006\034\015\035\017\033\022\032\023\105" +
    "\001\002\000\022\002\ufff5\013\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\031\ufff5\032\ufff5\001\002\000\012\004\027" +
    "\005\107\021\025\032\016\001\002\000\004\020\uffe9\001" +
    "\002\000\004\020\120\001\002\000\020\006\034\010\114" +
    "\011\112\012\113\015\035\017\033\022\032\001\002\000" +
    "\010\004\027\021\025\032\016\001\002\000\010\004\027" +
    "\021\025\032\016\001\002\000\010\004\027\021\025\032" +
    "\016\001\002\000\014\006\034\015\035\017\033\020\uffec" +
    "\022\032\001\002\000\014\006\034\015\035\017\033\020" +
    "\uffea\022\032\001\002\000\014\006\034\015\035\017\033" +
    "\020\uffeb\022\032\001\002\000\004\014\121\001\002\000" +
    "\016\013\uffff\025\uffff\026\uffff\027\uffff\031\uffff\032\uffff" +
    "\001\002\000\016\013\123\025\017\026\010\027\012\031" +
    "\023\032\016\001\002\000\022\002\uffdb\013\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\001\002\000" +
    "\012\004\027\005\107\021\025\032\016\001\002\000\004" +
    "\020\126\001\002\000\004\014\127\001\002\000\016\013" +
    "\uffff\025\uffff\026\uffff\027\uffff\031\uffff\032\uffff\001\002" +
    "\000\016\013\131\025\017\026\010\027\012\031\023\032" +
    "\016\001\002\000\024\002\uffdd\013\uffdd\024\132\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\001\002\000" +
    "\004\014\133\001\002\000\016\013\uffff\025\uffff\026\uffff" +
    "\027\uffff\031\uffff\032\uffff\001\002\000\016\013\135\025" +
    "\017\026\010\027\012\031\023\032\016\001\002\000\022" +
    "\002\uffdc\013\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\001\002\000\012\004\027\020\137\021\025" +
    "\032\016\001\002\000\026\006\uffde\010\uffde\011\uffde\012" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\022\uffde\023\uffde" +
    "\001\002\000\006\016\142\020\143\001\002\000\016\006" +
    "\034\015\035\016\uffe6\017\033\020\uffe6\022\032\001\002" +
    "\000\010\004\027\021\025\032\016\001\002\000\026\006" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\022\uffdf\023\uffdf\001\002\000\016\006\034\015" +
    "\035\016\uffe5\017\033\020\uffe5\022\032\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\006\004\004\020\003\001\001\000\002\001" +
    "\001\000\024\002\013\005\017\006\010\007\006\010\021" +
    "\011\014\014\020\016\005\017\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\030\003\025\007\006\010\027" +
    "\001\001\000\012\002\030\003\043\007\006\010\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\030\003\042\007\006\010" +
    "\027\001\001\000\012\002\030\003\041\007\006\010\027" +
    "\001\001\000\012\002\030\003\040\007\006\010\027\001" +
    "\001\000\012\002\030\003\037\007\006\010\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\053\012\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\056\001\001\000\024\002\013" +
    "\005\017\006\010\007\006\010\021\011\014\014\020\016" +
    "\005\017\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\030\003\062\007\006\010\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\101\001\001\000\002\001\001\000" +
    "\004\004\071\001\001\000\024\002\013\005\017\006\010" +
    "\007\006\010\021\011\014\014\020\016\005\017\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\030" +
    "\003\075\007\006\010\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\030\003\103\007\006\010\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\002\030" +
    "\003\110\007\006\010\027\015\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\030" +
    "\003\116\007\006\010\027\001\001\000\012\002\030\003" +
    "\115\007\006\010\027\001\001\000\012\002\030\003\114" +
    "\007\006\010\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\121" +
    "\001\001\000\024\002\013\005\017\006\010\007\006\010" +
    "\021\011\014\014\020\016\005\017\012\001\001\000\002" +
    "\001\001\000\014\002\030\003\110\007\006\010\027\015" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\127\001\001\000\024\002\013\005\017\006\010\007" +
    "\006\010\021\011\014\014\020\016\005\017\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\133\001" +
    "\001\000\024\002\013\005\017\006\010\007\006\010\021" +
    "\011\014\014\020\016\005\017\012\001\001\000\002\001" +
    "\001\000\014\002\030\003\140\007\006\010\027\013\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\030\003\143\007\006\010\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LOOP ::= kwLoop kwRoundOpen BOOL_EXPRESSION kwRoundClose kwCurlyOpen INSTRUCTIONS kwCurlyClose 
            {
              InstrLoop RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instr be = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrInstructions is = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrLoop(be, is); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONDITIONAL ::= kwIf kwRoundOpen BOOL_EXPRESSION kwRoundClose kwCurlyOpen INSTRUCTIONS kwCurlyClose kwElse kwCurlyOpen INSTRUCTIONS kwCurlyClose 
            {
              InstrConditional RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instr be = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int istleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int istright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		InstrInstructions ist = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int isfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrInstructions isf = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrConditional(be, ist, isf); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONDITIONAL ::= kwIf kwRoundOpen BOOL_EXPRESSION kwRoundClose kwCurlyOpen INSTRUCTIONS kwCurlyClose 
            {
              InstrConditional RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instr be = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int istleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int istright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrInstructions ist = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrConditional(be, ist); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCTION_CALL ::= FUNCTION_NAME kwRoundOpen kwRoundClose 
            {
              InstrGetFunction RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstrGetFunction(fn); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCTION_CALL ::= FUNCTION_NAME kwRoundOpen ARGUMENT_LIST kwRoundClose 
            {
              InstrGetFunction RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArgList al = (ArgList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrGetFunction(fn, al); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCTION_DEF ::= kwFunction FUNCTION_NAME kwRoundOpen ARGUMENT_DEF kwRoundClose kwCurlyOpen INSTRUCTIONS kwReturn kwRoundOpen ARIT_EXPRESSION kwRoundClose kwEnd kwCurlyClose 
            {
              InstrSetFunction RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		List<String> ad = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		InstrInstructions is = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instr ae = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new InstrSetFunction(fn, ad, is, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCTION_DEF ::= kwFunction FUNCTION_NAME kwRoundOpen kwRoundClose kwCurlyOpen INSTRUCTIONS kwReturn kwRoundOpen ARIT_EXPRESSION kwRoundClose kwEnd kwCurlyClose 
            {
              InstrSetFunction RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		InstrInstructions is = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instr ae = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new InstrSetFunction(fn, is, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCTION_DEF ::= kwFunction FUNCTION_NAME kwRoundOpen ARGUMENT_DEF kwRoundClose kwCurlyOpen INSTRUCTIONS kwCurlyClose 
            {
              InstrSetFunction RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<String> ad = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrInstructions is = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrSetFunction(fn, ad, is); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCTION_DEF ::= kwFunction FUNCTION_NAME kwRoundOpen kwRoundClose kwCurlyOpen INSTRUCTIONS kwCurlyClose 
            {
              InstrSetFunction RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrInstructions is = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrSetFunction(fn, is); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCTION_NAME ::= identifier 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_NAME",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARGUMENT_LIST ::= ARGUMENT_LIST kwList ARIT_EXPRESSION 
            {
              ArgList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArgList al = (ArgList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr ae = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  al.add(ae);
                        RESULT = al;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENT_LIST",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARGUMENT_LIST ::= ARIT_EXPRESSION 
            {
              ArgList RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr ae = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgList(ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENT_LIST",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARGUMENT_DEF ::= ARGUMENT_DEF kwList VARIABLE 
            {
              List<String> RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> ad = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  ad.add(v);
				        RESULT = ad;
				    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENT_DEF",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARGUMENT_DEF ::= VARIABLE 
            {
              List<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<String>(Arrays.asList(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENT_DEF",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BOOL_EXPRESSION ::= literalBoolean 
            {
              Instr RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = InstrConstant.fromString(lb); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL_EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BOOL_EXPRESSION ::= ARIT_EXPRESSION kwGreater ARIT_EXPRESSION 
            {
              Instr RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ael = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr aer = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrBinExpression(BinOperator.GTR, ael, aer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL_EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BOOL_EXPRESSION ::= ARIT_EXPRESSION kwLess ARIT_EXPRESSION 
            {
              Instr RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ael = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr aer = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrBinExpression(BinOperator.LES, ael, aer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL_EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BOOL_EXPRESSION ::= ARIT_EXPRESSION kwEqual ARIT_EXPRESSION 
            {
              Instr RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ael = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr aer = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrBinExpression(BinOperator.EQU, ael, aer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL_EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARIT_EXPRESSION ::= ARIT_EXPRESSION kwDiv ARIT_EXPRESSION 
            {
              Instr RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ael = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr aer = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrBinExpression(BinOperator.DIV, ael, aer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARIT_EXPRESSION ::= ARIT_EXPRESSION kwMul ARIT_EXPRESSION 
            {
              Instr RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ael = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr aer = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrBinExpression(BinOperator.MUL, ael, aer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARIT_EXPRESSION ::= ARIT_EXPRESSION kwSub ARIT_EXPRESSION 
            {
              Instr RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ael = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr aer = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrBinExpression(BinOperator.SUB, ael, aer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARIT_EXPRESSION ::= ARIT_EXPRESSION kwAdd ARIT_EXPRESSION 
            {
              Instr RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ael = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr aer = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrBinExpression(BinOperator.ADD, ael, aer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARIT_EXPRESSION ::= VARIABLE 
            {
              Instr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrGetVariable(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARIT_EXPRESSION ::= literalInteger 
            {
              Instr RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = InstrConstant.fromString(li); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARIT_EXPRESSION ::= kwRoundOpen ARIT_EXPRESSION kwRoundClose 
            {
              Instr RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instr ae = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ae; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARIT_EXPRESSION ::= FUNCTION_CALL 
            {
              Instr RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrGetFunction fc = (InstrGetFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_EXPRESSION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VAR_ASSIGN ::= VARIABLE kwAssign ARIT_EXPRESSION kwEnd 
            {
              InstrSetVariable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instr ae = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrSetVariable(v, ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_ASSIGN",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIABLE ::= identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ECHO ::= kwEcho kwRoundOpen ARIT_EXPRESSION kwRoundClose kwEnd 
            {
              InstrEcho RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instr ae = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstrEcho(ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ECHO",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= ECHO 
            {
              Instr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrEcho e = (InstrEcho)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= LOOP 
            {
              Instr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrLoop l = (InstrLoop)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= CONDITIONAL 
            {
              Instr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrConditional c = (InstrConditional)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= FUNCTION_CALL kwEnd 
            {
              Instr RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrGetFunction fc = (InstrGetFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = fc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= FUNCTION_DEF 
            {
              Instr RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrSetFunction fd = (InstrSetFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTION ::= VAR_ASSIGN 
            {
              Instr RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrSetVariable va = (InstrSetVariable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = va; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              InstrInstructions RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrInstructions is = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instr i = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = is;
                        RESULT.addInstruction(i);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCTIONS ::= 
            {
              InstrInstructions RESULT =null;
		  RESULT = new InstrInstructions(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SCRIPT ::= INSTRUCTIONS 
            {
              InstrScript RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrInstructions is = (InstrInstructions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstrScript(is); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SCRIPT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrScript start_val = (InstrScript)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

