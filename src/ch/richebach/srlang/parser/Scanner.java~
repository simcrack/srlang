/* The following code was generated by JFlex 1.4.3 on 24.06.21 19:55 */

package ch.richebach.srlang.parser;

import java_cup.runtime.Symbol;
import static ch.richebach.srlang.parser.Terminals.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24.06.21 19:55 from the specification file
 * <tt>./grammars/Scanner.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\42\1\35\2\0\1\41\22\0\1\42\7\0\1\11\1\12"+
    "\1\3\1\1\1\15\1\2\1\0\1\4\12\36\1\5\1\16\1\7"+
    "\1\6\1\10\2\0\32\40\6\37\1\33\1\40\1\27\1\40\1\17"+
    "\1\21\1\40\1\30\1\23\2\40\1\20\1\40\1\22\1\31\1\24"+
    "\1\40\1\25\1\34\1\26\1\32\5\40\1\13\1\0\1\14\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\7\16"+
    "\1\17\1\20\1\17\1\0\1\21\1\22\1\16\1\23"+
    "\1\16\1\24\1\25\1\16\1\26\2\16\1\17\3\16"+
    "\1\27\2\16\1\30\1\16\1\31\1\16\1\31\373\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\43\0\43\0\43\0\106\0\151\0\214"+
    "\0\43\0\43\0\43\0\43\0\43\0\43\0\43\0\43"+
    "\0\257\0\322\0\365\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4"+
    "\0\u01c7\0\u01ea\0\u020d\0\43\0\43\0\u0230\0\u0230\0\u0253"+
    "\0\u0230\0\u0230\0\u0276\0\u0230\0\u0299\0\u02bc\0\43\0\u02df"+
    "\0\u0302\0\u0325\0\u02df\0\u0348\0\u036b\0\u036b\0\u038e\0\u036b"+
    "\0\u03b1\0\u03b1\0\u03d4\0\u03f7\0\u041a\0\u043d\0\u0460\0\u0483"+
    "\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\u0532\0\u0555\0\u0578\0\u059b"+
    "\0\u05be\0\u05e1\0\u0604\0\u0627\0\u064a\0\u066d\0\u0690\0\u06b3"+
    "\0\u06d6\0\u06f9\0\u071c\0\u073f\0\u0762\0\u0785\0\u07a8\0\u07cb"+
    "\0\u07ee\0\u0811\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0\0\u08e3"+
    "\0\u0906\0\u0929\0\u094c\0\u096f\0\u0992\0\u09b5\0\u09d8\0\u09fb"+
    "\0\u0a1e\0\u0a41\0\u0a64\0\u0a87\0\u0aaa\0\u0acd\0\u0af0\0\u0b13"+
    "\0\u0b36\0\u0b59\0\u0b7c\0\u0b9f\0\u0bc2\0\u0be5\0\u0c08\0\u0c2b"+
    "\0\u0c4e\0\u0c71\0\u0c94\0\u0cb7\0\u0cda\0\u0cfd\0\u0d20\0\u0d43"+
    "\0\u0d66\0\u0d89\0\u0dac\0\u0dcf\0\u0df2\0\u0e15\0\u0e38\0\u0e5b"+
    "\0\u0e7e\0\u0ea1\0\u0ec4\0\u0ee7\0\u0f0a\0\u0f2d\0\u0f50\0\u0f73"+
    "\0\u0f96\0\u0fb9\0\u0fdc\0\u0fff\0\u1022\0\u1045\0\u1068\0\u108b"+
    "\0\u10ae\0\u10d1\0\u10f4\0\u1117\0\u113a\0\u115d\0\u1180\0\u11a3"+
    "\0\u11c6\0\u11e9\0\u120c\0\u122f\0\u1252\0\u1275\0\u1298\0\u12bb"+
    "\0\u12de\0\u1301\0\u1324\0\u1347\0\u136a\0\u138d\0\u13b0\0\u13d3"+
    "\0\u13f6\0\u1419\0\u143c\0\u145f\0\u1482\0\u14a5\0\u14c8\0\u14eb"+
    "\0\u150e\0\u1531\0\u1554\0\u1577\0\u159a\0\u15bd\0\u15e0\0\u1603"+
    "\0\u1626\0\u1649\0\u166c\0\u168f\0\u16b2\0\u16d5\0\u16f8\0\u171b"+
    "\0\u173e\0\u1761\0\u1784\0\u17a7\0\u17ca\0\u17ed\0\u1810\0\u1833"+
    "\0\u1856\0\u1879\0\u189c\0\u18bf\0\u18e2\0\u1905\0\u1928\0\u194b"+
    "\0\u196e\0\u1991\0\u19b4\0\u19d7\0\u19fa\0\u1a1d\0\u1a40\0\u1a63"+
    "\0\u1a86\0\u1aa9\0\u1acc\0\u1aef\0\u1b12\0\u1b35\0\u1b58\0\u1b7b"+
    "\0\u1b9e\0\u1bc1\0\u1be4\0\u1c07\0\u1c2a\0\u1c4d\0\u1c70\0\u1c93"+
    "\0\u1cb6\0\u1cd9\0\u1cfc\0\u1d1f\0\u1d42\0\u1d65\0\u1d88\0\u1dab"+
    "\0\u1dce\0\u1df1\0\u1e14\0\u1e37\0\u1e5a\0\u1e7d\0\u1ea0\0\u1ec3"+
    "\0\u1ee6\0\u1f09\0\u1f2c\0\u1f4f\0\u1f72\0\u1f95\0\u1fb8\0\u1fdb"+
    "\0\u1ffe\0\u2021\0\u2044\0\u2067\0\u208a\0\u20ad\0\u20d0\0\u20f3"+
    "\0\u2116\0\u2139\0\u215c\0\u217f\0\u21a2\0\u21c5\0\u21e8\0\u220b"+
    "\0\u222e\0\u2251\0\u2274\0\u2297\0\u22ba\0\u22dd\0\u2300\0\u2323"+
    "\0\u2346\0\u2369\0\u238c\0\u23af\0\u23d2\0\u23f5\0\u2418\0\u243b"+
    "\0\u245e\0\u2481\0\u24a4\0\u24c7\0\u24ea\0\u250d\0\u2530\0\u2553"+
    "\0\u2576\0\u2599\0\u25bc\0\u25df\0\43";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\24\1\26\1\27\6\24"+
    "\1\30\1\31\2\24\1\30\1\32\47\0\1\33\44\0"+
    "\1\34\42\0\1\35\53\0\1\36\1\37\6\36\1\40"+
    "\5\36\1\0\1\36\1\0\1\36\21\0\5\36\1\41"+
    "\10\36\1\0\1\36\1\0\1\36\21\0\3\36\1\42"+
    "\10\36\1\43\1\36\1\0\1\36\1\0\1\36\21\0"+
    "\16\36\1\0\1\36\1\0\1\36\21\0\2\36\1\44"+
    "\13\36\1\0\1\36\1\0\1\36\21\0\1\45\15\36"+
    "\1\0\1\36\1\0\1\36\21\0\6\36\1\46\7\36"+
    "\1\0\1\36\1\0\1\36\37\0\1\30\3\0\1\30"+
    "\37\0\1\31\46\0\1\32\35\33\1\47\5\33\17\0"+
    "\16\50\1\0\1\50\1\0\1\50\21\0\11\50\1\51"+
    "\4\50\1\0\1\50\1\0\1\50\21\0\1\50\1\52"+
    "\14\50\1\0\1\50\1\0\1\50\21\0\7\50\1\53"+
    "\6\50\1\0\1\50\1\0\1\50\21\0\13\50\1\54"+
    "\2\50\1\0\1\50\1\0\1\50\21\0\16\55\1\0"+
    "\1\55\1\0\1\55\21\0\12\55\1\56\3\55\1\0"+
    "\1\55\1\0\1\55\21\0\15\55\1\57\1\0\1\55"+
    "\1\0\1\55\21\0\1\60\15\55\1\0\1\55\1\0"+
    "\1\55\21\0\16\61\1\0\1\61\1\0\1\61\21\0"+
    "\1\62\15\61\1\0\1\61\1\0\1\61\21\0\16\63"+
    "\1\0\1\63\1\0\1\63\21\0\16\64\1\0\1\64"+
    "\1\0\1\64\21\0\16\65\1\0\1\65\1\0\1\65"+
    "\21\0\16\66\1\0\1\66\1\0\1\66\21\0\16\67"+
    "\1\0\1\67\1\0\1\67\21\0\16\70\1\0\1\70"+
    "\1\0\1\70\21\0\16\71\1\0\1\71\1\0\1\71"+
    "\21\0\16\72\1\0\1\72\1\0\1\72\21\0\16\73"+
    "\1\0\1\73\1\0\1\73\21\0\16\74\1\0\1\74"+
    "\1\0\1\74\21\0\16\75\1\0\1\75\1\0\1\75"+
    "\21\0\16\76\1\0\1\76\1\0\1\76\21\0\16\77"+
    "\1\0\1\77\1\0\1\77\21\0\16\100\1\0\1\100"+
    "\1\0\1\100\21\0\16\101\1\0\1\101\1\0\1\101"+
    "\21\0\16\102\1\0\1\102\1\0\1\102\21\0\16\103"+
    "\1\0\1\103\1\0\1\103\21\0\16\104\1\0\1\104"+
    "\1\0\1\104\21\0\16\105\1\0\1\105\1\0\1\105"+
    "\21\0\16\106\1\0\1\106\1\0\1\106\21\0\16\107"+
    "\1\0\1\107\1\0\1\107\21\0\16\110\1\0\1\110"+
    "\1\0\1\110\21\0\16\111\1\0\1\111\1\0\1\111"+
    "\21\0\16\112\1\0\1\112\1\0\1\112\21\0\16\113"+
    "\1\0\1\113\1\0\1\113\21\0\16\114\1\0\1\114"+
    "\1\0\1\114\21\0\16\115\1\0\1\115\1\0\1\115"+
    "\21\0\16\116\1\0\1\116\1\0\1\116\21\0\16\117"+
    "\1\0\1\117\1\0\1\117\21\0\16\120\1\0\1\120"+
    "\1\0\1\120\21\0\16\121\1\0\1\121\1\0\1\121"+
    "\21\0\16\122\1\0\1\122\1\0\1\122\21\0\16\123"+
    "\1\0\1\123\1\0\1\123\21\0\16\124\1\0\1\124"+
    "\1\0\1\124\21\0\16\125\1\0\1\125\1\0\1\125"+
    "\21\0\16\126\1\0\1\126\1\0\1\126\21\0\16\127"+
    "\1\0\1\127\1\0\1\127\21\0\16\130\1\0\1\130"+
    "\1\0\1\130\21\0\16\131\1\0\1\131\1\0\1\131"+
    "\21\0\16\132\1\0\1\132\1\0\1\132\21\0\16\133"+
    "\1\0\1\133\1\0\1\133\21\0\16\134\1\0\1\134"+
    "\1\0\1\134\21\0\16\135\1\0\1\135\1\0\1\135"+
    "\21\0\16\136\1\0\1\136\1\0\1\136\21\0\16\137"+
    "\1\0\1\137\1\0\1\137\21\0\16\140\1\0\1\140"+
    "\1\0\1\140\21\0\16\141\1\0\1\141\1\0\1\141"+
    "\21\0\16\142\1\0\1\142\1\0\1\142\21\0\16\143"+
    "\1\0\1\143\1\0\1\143\21\0\16\144\1\0\1\144"+
    "\1\0\1\144\21\0\16\145\1\0\1\145\1\0\1\145"+
    "\21\0\16\146\1\0\1\146\1\0\1\146\21\0\16\147"+
    "\1\0\1\147\1\0\1\147\21\0\16\150\1\0\1\150"+
    "\1\0\1\150\21\0\16\151\1\0\1\151\1\0\1\151"+
    "\21\0\16\152\1\0\1\152\1\0\1\152\21\0\16\153"+
    "\1\0\1\153\1\0\1\153\21\0\16\154\1\0\1\154"+
    "\1\0\1\154\21\0\16\155\1\0\1\155\1\0\1\155"+
    "\21\0\16\156\1\0\1\156\1\0\1\156\21\0\16\157"+
    "\1\0\1\157\1\0\1\157\21\0\16\160\1\0\1\160"+
    "\1\0\1\160\21\0\16\161\1\0\1\161\1\0\1\161"+
    "\21\0\16\162\1\0\1\162\1\0\1\162\21\0\16\163"+
    "\1\0\1\163\1\0\1\163\21\0\16\164\1\0\1\164"+
    "\1\0\1\164\21\0\16\165\1\0\1\165\1\0\1\165"+
    "\21\0\16\166\1\0\1\166\1\0\1\166\21\0\16\167"+
    "\1\0\1\167\1\0\1\167\21\0\16\170\1\0\1\170"+
    "\1\0\1\170\21\0\16\171\1\0\1\171\1\0\1\171"+
    "\21\0\16\172\1\0\1\172\1\0\1\172\21\0\16\173"+
    "\1\0\1\173\1\0\1\173\21\0\16\174\1\0\1\174"+
    "\1\0\1\174\21\0\16\175\1\0\1\175\1\0\1\175"+
    "\21\0\16\176\1\0\1\176\1\0\1\176\21\0\16\177"+
    "\1\0\1\177\1\0\1\177\21\0\16\200\1\0\1\200"+
    "\1\0\1\200\21\0\16\201\1\0\1\201\1\0\1\201"+
    "\21\0\16\202\1\0\1\202\1\0\1\202\21\0\16\203"+
    "\1\0\1\203\1\0\1\203\21\0\16\204\1\0\1\204"+
    "\1\0\1\204\21\0\16\205\1\0\1\205\1\0\1\205"+
    "\21\0\16\206\1\0\1\206\1\0\1\206\21\0\16\207"+
    "\1\0\1\207\1\0\1\207\21\0\16\210\1\0\1\210"+
    "\1\0\1\210\21\0\16\211\1\0\1\211\1\0\1\211"+
    "\21\0\16\212\1\0\1\212\1\0\1\212\21\0\16\213"+
    "\1\0\1\213\1\0\1\213\21\0\16\214\1\0\1\214"+
    "\1\0\1\214\21\0\16\215\1\0\1\215\1\0\1\215"+
    "\21\0\16\216\1\0\1\216\1\0\1\216\21\0\16\217"+
    "\1\0\1\217\1\0\1\217\21\0\16\220\1\0\1\220"+
    "\1\0\1\220\21\0\16\221\1\0\1\221\1\0\1\221"+
    "\21\0\16\222\1\0\1\222\1\0\1\222\21\0\16\223"+
    "\1\0\1\223\1\0\1\223\21\0\16\224\1\0\1\224"+
    "\1\0\1\224\21\0\16\225\1\0\1\225\1\0\1\225"+
    "\21\0\16\226\1\0\1\226\1\0\1\226\21\0\16\227"+
    "\1\0\1\227\1\0\1\227\21\0\16\230\1\0\1\230"+
    "\1\0\1\230\21\0\16\231\1\0\1\231\1\0\1\231"+
    "\21\0\16\232\1\0\1\232\1\0\1\232\21\0\16\233"+
    "\1\0\1\233\1\0\1\233\21\0\16\234\1\0\1\234"+
    "\1\0\1\234\21\0\16\235\1\0\1\235\1\0\1\235"+
    "\21\0\16\236\1\0\1\236\1\0\1\236\21\0\16\237"+
    "\1\0\1\237\1\0\1\237\21\0\16\240\1\0\1\240"+
    "\1\0\1\240\21\0\16\241\1\0\1\241\1\0\1\241"+
    "\21\0\16\242\1\0\1\242\1\0\1\242\21\0\16\243"+
    "\1\0\1\243\1\0\1\243\21\0\16\244\1\0\1\244"+
    "\1\0\1\244\21\0\16\245\1\0\1\245\1\0\1\245"+
    "\21\0\16\246\1\0\1\246\1\0\1\246\21\0\16\247"+
    "\1\0\1\247\1\0\1\247\21\0\16\250\1\0\1\250"+
    "\1\0\1\250\21\0\16\251\1\0\1\251\1\0\1\251"+
    "\21\0\16\252\1\0\1\252\1\0\1\252\21\0\16\253"+
    "\1\0\1\253\1\0\1\253\21\0\16\254\1\0\1\254"+
    "\1\0\1\254\21\0\16\255\1\0\1\255\1\0\1\255"+
    "\21\0\16\256\1\0\1\256\1\0\1\256\21\0\16\257"+
    "\1\0\1\257\1\0\1\257\21\0\16\260\1\0\1\260"+
    "\1\0\1\260\21\0\16\261\1\0\1\261\1\0\1\261"+
    "\21\0\16\262\1\0\1\262\1\0\1\262\21\0\16\263"+
    "\1\0\1\263\1\0\1\263\21\0\16\264\1\0\1\264"+
    "\1\0\1\264\21\0\16\265\1\0\1\265\1\0\1\265"+
    "\21\0\16\266\1\0\1\266\1\0\1\266\21\0\16\267"+
    "\1\0\1\267\1\0\1\267\21\0\16\270\1\0\1\270"+
    "\1\0\1\270\21\0\16\271\1\0\1\271\1\0\1\271"+
    "\21\0\16\272\1\0\1\272\1\0\1\272\21\0\16\273"+
    "\1\0\1\273\1\0\1\273\21\0\16\274\1\0\1\274"+
    "\1\0\1\274\21\0\16\275\1\0\1\275\1\0\1\275"+
    "\21\0\16\276\1\0\1\276\1\0\1\276\21\0\16\277"+
    "\1\0\1\277\1\0\1\277\21\0\16\300\1\0\1\300"+
    "\1\0\1\300\21\0\16\301\1\0\1\301\1\0\1\301"+
    "\21\0\16\302\1\0\1\302\1\0\1\302\21\0\16\303"+
    "\1\0\1\303\1\0\1\303\21\0\16\304\1\0\1\304"+
    "\1\0\1\304\21\0\16\305\1\0\1\305\1\0\1\305"+
    "\21\0\16\306\1\0\1\306\1\0\1\306\21\0\16\307"+
    "\1\0\1\307\1\0\1\307\21\0\16\310\1\0\1\310"+
    "\1\0\1\310\21\0\16\311\1\0\1\311\1\0\1\311"+
    "\21\0\16\312\1\0\1\312\1\0\1\312\21\0\16\313"+
    "\1\0\1\313\1\0\1\313\21\0\16\314\1\0\1\314"+
    "\1\0\1\314\21\0\16\315\1\0\1\315\1\0\1\315"+
    "\21\0\16\316\1\0\1\316\1\0\1\316\21\0\16\317"+
    "\1\0\1\317\1\0\1\317\21\0\16\320\1\0\1\320"+
    "\1\0\1\320\21\0\16\321\1\0\1\321\1\0\1\321"+
    "\21\0\16\322\1\0\1\322\1\0\1\322\21\0\16\323"+
    "\1\0\1\323\1\0\1\323\21\0\16\324\1\0\1\324"+
    "\1\0\1\324\21\0\16\325\1\0\1\325\1\0\1\325"+
    "\21\0\16\326\1\0\1\326\1\0\1\326\21\0\16\327"+
    "\1\0\1\327\1\0\1\327\21\0\16\330\1\0\1\330"+
    "\1\0\1\330\21\0\16\331\1\0\1\331\1\0\1\331"+
    "\21\0\16\332\1\0\1\332\1\0\1\332\21\0\16\333"+
    "\1\0\1\333\1\0\1\333\21\0\16\334\1\0\1\334"+
    "\1\0\1\334\21\0\16\335\1\0\1\335\1\0\1\335"+
    "\21\0\16\336\1\0\1\336\1\0\1\336\21\0\16\337"+
    "\1\0\1\337\1\0\1\337\21\0\16\340\1\0\1\340"+
    "\1\0\1\340\21\0\16\341\1\0\1\341\1\0\1\341"+
    "\21\0\16\342\1\0\1\342\1\0\1\342\21\0\16\343"+
    "\1\0\1\343\1\0\1\343\21\0\16\344\1\0\1\344"+
    "\1\0\1\344\21\0\16\345\1\0\1\345\1\0\1\345"+
    "\21\0\16\346\1\0\1\346\1\0\1\346\21\0\16\347"+
    "\1\0\1\347\1\0\1\347\21\0\16\350\1\0\1\350"+
    "\1\0\1\350\21\0\16\351\1\0\1\351\1\0\1\351"+
    "\21\0\16\352\1\0\1\352\1\0\1\352\21\0\16\353"+
    "\1\0\1\353\1\0\1\353\21\0\16\354\1\0\1\354"+
    "\1\0\1\354\21\0\16\355\1\0\1\355\1\0\1\355"+
    "\21\0\16\356\1\0\1\356\1\0\1\356\21\0\16\357"+
    "\1\0\1\357\1\0\1\357\21\0\16\360\1\0\1\360"+
    "\1\0\1\360\21\0\16\361\1\0\1\361\1\0\1\361"+
    "\21\0\16\362\1\0\1\362\1\0\1\362\21\0\16\363"+
    "\1\0\1\363\1\0\1\363\21\0\16\364\1\0\1\364"+
    "\1\0\1\364\21\0\16\365\1\0\1\365\1\0\1\365"+
    "\21\0\16\366\1\0\1\366\1\0\1\366\21\0\16\367"+
    "\1\0\1\367\1\0\1\367\21\0\16\370\1\0\1\370"+
    "\1\0\1\370\21\0\16\371\1\0\1\371\1\0\1\371"+
    "\21\0\16\372\1\0\1\372\1\0\1\372\21\0\16\373"+
    "\1\0\1\373\1\0\1\373\21\0\16\374\1\0\1\374"+
    "\1\0\1\374\21\0\16\375\1\0\1\375\1\0\1\375"+
    "\21\0\16\376\1\0\1\376\1\0\1\376\21\0\16\377"+
    "\1\0\1\377\1\0\1\377\21\0\16\u0100\1\0\1\u0100"+
    "\1\0\1\u0100\21\0\16\u0101\1\0\1\u0101\1\0\1\u0101"+
    "\21\0\16\u0102\1\0\1\u0102\1\0\1\u0102\21\0\16\u0103"+
    "\1\0\1\u0103\1\0\1\u0103\21\0\16\u0104\1\0\1\u0104"+
    "\1\0\1\u0104\21\0\16\u0105\1\0\1\u0105\1\0\1\u0105"+
    "\21\0\16\u0106\1\0\1\u0106\1\0\1\u0106\21\0\16\u0107"+
    "\1\0\1\u0107\1\0\1\u0107\21\0\16\u0108\1\0\1\u0108"+
    "\1\0\1\u0108\21\0\16\u0109\1\0\1\u0109\1\0\1\u0109"+
    "\21\0\16\u010a\1\0\1\u010a\1\0\1\u010a\21\0\16\u010b"+
    "\1\0\1\u010b\1\0\1\u010b\21\0\16\u010c\1\0\1\u010c"+
    "\1\0\1\u010c\21\0\16\u010d\1\0\1\u010d\1\0\1\u010d"+
    "\21\0\16\u010e\1\0\1\u010e\1\0\1\u010e\21\0\16\u010f"+
    "\1\0\1\u010f\1\0\1\u010f\21\0\16\u0110\1\0\1\u0110"+
    "\1\0\1\u0110\21\0\16\u0111\1\0\1\u0111\1\0\1\u0111"+
    "\21\0\16\u0112\1\0\1\u0112\1\0\1\u0112\21\0\16\u0113"+
    "\1\0\1\u0113\1\0\1\u0113\21\0\16\u0114\1\0\1\u0114"+
    "\1\0\1\u0114\21\0\16\u0115\1\0\1\u0115\1\0\1\u0115"+
    "\21\0\16\u0116\1\0\1\u0116\1\0\1\u0116\21\0\16\u0117"+
    "\1\0\1\u0117\1\0\1\u0117\21\0\16\u0118\1\0\1\u0118"+
    "\1\0\1\u0118\21\0\16\u0119\1\0\1\u0119\1\0\1\u0119"+
    "\21\0\16\u011a\1\0\1\u011a\1\0\1\u011a\21\0\16\u011b"+
    "\1\0\1\u011b\1\0\1\u011b\21\0\16\u011c\1\0\1\u011c"+
    "\1\0\1\u011c\21\0\16\u011d\1\0\1\u011d\1\0\1\u011d"+
    "\21\0\16\u011e\1\0\1\u011e\1\0\1\u011e\21\0\16\u011f"+
    "\1\0\1\u011f\1\0\1\u011f\21\0\16\u0120\1\0\1\u0120"+
    "\1\0\1\u0120\21\0\16\u0121\1\0\1\u0121\1\0\1\u0121"+
    "\21\0\16\u0122\1\0\1\u0122\1\0\1\u0122\21\0\16\u0123"+
    "\1\0\1\u0123\1\0\1\u0123\21\0\16\u0124\1\0\1\u0124"+
    "\1\0\1\u0124\21\0\16\u0125\1\0\1\u0125\1\0\1\u0125"+
    "\21\0\16\u0126\1\0\1\u0126\1\0\1\u0126\21\0\16\u0127"+
    "\1\0\1\u0127\1\0\1\u0127\21\0\16\u0128\1\0\1\u0128"+
    "\1\0\1\u0128\21\0\16\u0129\1\0\1\u0129\1\0\1\u0129"+
    "\21\0\16\u012a\1\0\1\u012a\1\0\1\u012a\21\0\16\u012b"+
    "\1\0\1\u012b\1\0\1\u012b\21\0\16\u012c\1\0\1\u012c"+
    "\1\0\1\u012c\21\0\16\u012d\1\0\1\u012d\1\0\1\u012d"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9730];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\3\1\10\11\12\1\1\0\2\11\11\1"+
    "\1\11\u0105\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol sym(int type)
    {
         return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symVal(int type)
    {
         return new Symbol(type, yyline, yycolumn, yytext());
    }
   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 100) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new RuntimeException("Illegal Symbol '" + yytext() + "' in line " + yyline + ", column " + yycolumn);
          }
        case 26: break;
        case 21: 
          { return sym(kwFunction);
          }
        case 27: break;
        case 14: 
          { return symVal(identifier);
          }
        case 28: break;
        case 13: 
          { return sym(kwEnd);
          }
        case 29: break;
        case 11: 
          { return sym(kwCurlyClose);
          }
        case 30: break;
        case 2: 
          { return sym(kwAdd);
          }
        case 31: break;
        case 9: 
          { return sym(kwRoundClose);
          }
        case 32: break;
        case 8: 
          { return sym(kwRoundOpen);
          }
        case 33: break;
        case 19: 
          { return sym(kwElse);
          }
        case 34: break;
        case 16: 
          { return symVal(literalInteger);
          }
        case 35: break;
        case 18: 
          { return sym(kwEqual);
          }
        case 36: break;
        case 20: 
          { return sym(kwLoop);
          }
        case 37: break;
        case 4: 
          { return sym(kwMul);
          }
        case 38: break;
        case 17: 
          { return sym(kwAssign);
          }
        case 39: break;
        case 6: 
          { return sym(kwLess);
          }
        case 40: break;
        case 24: 
          { return sym(kwEcho);
          }
        case 41: break;
        case 12: 
          { return sym(kwList);
          }
        case 42: break;
        case 23: 
          { return sym(kwReturn);
          }
        case 43: break;
        case 22: 
          { return sym(kwIf);
          }
        case 44: break;
        case 10: 
          { return sym(kwCurlyOpen);
          }
        case 45: break;
        case 3: 
          { return sym(kwSub);
          }
        case 46: break;
        case 5: 
          { return sym(kwDiv);
          }
        case 47: break;
        case 25: 
          { return symVal(literalBoolean);
          }
        case 48: break;
        case 7: 
          { return sym(kwGreater);
          }
        case 49: break;
        case 15: 
          { 
          }
        case 50: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Terminals.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
